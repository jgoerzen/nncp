This is nncp.info, produced by makeinfo version 6.5 from index.texi.

This manual is for NNCP (Node to Node copy) – collection of utilities
simplifying secure store-and-forward files and mail exchanging.

   Copyright © 2016-2020 Sergey Matveev <stargrave@stargrave.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "Copying conditions".


File: nncp.info,  Node: Top,  Next: Comparison,  Up: (dir)

NNCP
****

*NNCP* (Node to Node copy) is a collection of utilities simplifying
secure store-and-forward files, mail and command exchanging.

   See also this page *note on russian: Об утилитах.

   This utilities are intended to help build up small size (dozens of
nodes) ad-hoc friend-to-friend
(https://en.wikipedia.org/wiki/Friend-to-friend) (F2F) statically routed
darknet (https://en.wikipedia.org/wiki/Darknet) delay-tolerant
(https://en.wikipedia.org/wiki/Delay-tolerant_networking) networks for
fire-and-forget secure reliable files, file requests, Internet mail and
commands transmission.  All packets are integrity checked, end-to-end
(https://en.wikipedia.org/wiki/End-to-end_encryption) encrypted,
explicitly authenticated by known participants public keys.  Onion
encryption (https://en.wikipedia.org/wiki/Onion_routing) is applied to
relayed packets.  Each node acts both as a client and server, can use
push and poll behaviour model.

   Out-of-box offline sneakernet/floppynet
(https://en.wikipedia.org/wiki/Sneakernet), dead drops
(https://en.wikipedia.org/wiki/Dead_drop), sequential and append-only
CD-ROM (https://en.wikipedia.org/wiki/CD-ROM)/tape
(https://en.wikipedia.org/wiki/Tape_drive) storages, air-gapped
(https://en.wikipedia.org/wiki/Air_gap_(networking)) computers support.
But online TCP daemon with full-duplex resumable data transmission
exists.

   Look for possible *note use cases: Use cases.!

   NNCP is copylefted (https://www.gnu.org/philosophy/pragmatic.html)
free software (https://www.gnu.org/philosophy/free-sw.html) licenced
under GNU GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html).  It should
work on all POSIX (https://en.wikipedia.org/wiki/POSIX)-compatible
systems.  Easy *note integration: Integration. with existing SMTP
(https://en.wikipedia.org/wiki/SMTP) servers.  Single Hjson
(https://hjson.org/) configuration file.

   Why create yet another store-and-forward solution when UUCP, FTN and
even SMTP exists?  Look in *note comparison: Comparison. section!
Simplicity, cryptographic security, sneakernet compatibility and easy
integration with current SMTP servers are the reasons.

              Interested? *note *Download it*: Tarballs.!

* Menu:

* Comparison::
* Use cases::
* Workflow::
* News::
* Информация на русском: Русский.
* Installation::
* Configuration::
* Call configuration: Call.
* Integration::
* Commands::
* Niceness::
* Chunked files: Chunked.
* Bundles::
* Spool directory: Spool.
* Log format: Log.
* Packet format: Packet.
* Sync protocol: Sync.
* EBlob format: EBlob.
* Thanks::
* Contacts and feedback: Contacts.
* Copying conditions: Copying.


File: nncp.info,  Node: Comparison,  Next: Use cases,  Prev: Top,  Up: Top

Comparison with existing solutions
**********************************

Here is comparison with UUCP (https://en.wikipedia.org/wiki/UUCP) (Unix
to Unix copy), FTN (FidoNet (https://en.wikipedia.org/wiki/FidoNet)
Technology Networks) and SMTP (https://en.wikipedia.org/wiki/SMTP)
(because it is also store-and-forward solution).

                              UUCP        FTN         NNCP        SMTP
                                                                  
------------------------------------------------------------------------------
Ease of setup                 Medium      Hard        Easy        Hard
Mail transmission             *Yes*       *Yes*       *Yes*       *Yes*
News transmission             *Yes*       *Yes*       No          No
File transmission             *Yes*       *Yes*       *Yes*       No
Chunked files                 No          *Yes*       *Yes*       No
Remote command execution      *Yes*       No          *Yes*       No
Resumable downloads           *Yes*       *Yes*       *Yes*       No
Packets prioritizing          *Yes*       No          *Yes*       No
Mail compression              No          *Yes*       *Yes*       No
SMTP integration              *Yes*       No          *Yes*       N/A
Push/poll                     *Both*      *Both*      *Both*      Push
DTN                           *Yes*       *Yes*       *Yes*       No
Intended network size         Dozens      Global      Dozens      Global
Routing                       Manual/staticFederated  Manual/staticFederated
PSTN support                  *Yes*       *Yes*       Possible    No
Anonymous peers               *Yes*       No          No          *Yes*
Peers authentication          PAP         PAP/CHAP    public-key  No
Packets encryption            No          No          *Yes*       No
Metadata privacy              No          No          *Yes*       No
Packets integrity check       No          No          *Yes*       No
Sneakernet friendliness       No          Partially   *Yes*       No
                                                                  

*Ease of setup*
     UUCP can be setup rather easily with few configuration files and
     few lines in each of them.  But you have to add some encryption and
     authentication overlay for securing you data transmission.

     FTN is hard to setup because it is totally different world of
     software comparing to Unix one.  Even mail editor will be something
     like GoldEd, not an ordinary email client.  Moreover, there is no
     out-of-box encryption and strong authentication involved.

     NNCP requires editing of single Hjson *note configuration file:
     Configuration.

*News transmission*
     SMTP does not know anything about news, NNTP and so forth.  Neither
     does NNCP, because they are not used very much nowadays.

*File transmission*
     SMTP could transfer files only Base64-encoding them – this is very
     inefficient.

*Chunked files*
     FTN software can automatically split huge files on smaller chunks,
     to reassemble it on the destination node.  NNCP also supports *note
     that feature: Chunked, especially important when dealing with small
     capacity removable storage devices.

*Packets prioritizing*
     UUCP and NNCP will push higher priority ("grade" in UUCP
     terminology) packets first.  You mail will pass, even when many
     gigabytes files are queued in parallel.

*SMTP integration*
     Mail servers like Postfix (http://www.postfix.org/) offers
     documentation and configuration file examples how to use it with
     UUCP. Exim (http://www.exim.org/) and Sendmail
     (http://www.sendmail.com/sm/open_source/) could be integrated with
     UUCP rather easily too.  For using NNCP, just replace UUCP commands
     with NNCP ones.

*Push/poll*
     With SMTP, you have to wait online when remote peers will push you
     the messages.  There are extensions to the protocol allowing
     poll-model, but they are not used everywhere.  This is very
     important to be independent from specified model and be able to
     exchange the data with possibility you have.

*DTN (https://en.wikipedia.org/wiki/Delay-tolerant_networking) (delay tolerant networking)*
     SMTP will drop messages that can not be delivered for a long time
     (several days).  Others are tolerant for the long delays.

*Routing*
     UUCP and NNCP does not known nothing about routing.  You have to
     explicitly tell how to send (what hops to use) packets to each
     node.

*PSTN support*
     UUCP and FidoNet always have been working with modems out-of-box.
     Only many years later they gained support for working over TCP/IP
     connections.  SMTP works only over TCP/IP. NNCP currently has only
     TCP daemon, but nothing prohibits using of another 8-bit aware
     online transport.

*Anonymous peers*
     NNCP and FTN are friend-to-friend networks exclusively.  This is
     very secure and mitigates many possible man-in-the-middle (MitM)
     and Sybil (https://en.wikipedia.org/wiki/Sybil_attack) attacks.

*Sneakernet friendliness*
     No one, except NNCP, supports data exchanging via removable
     storages likes flash drives, CD-ROMs, tapes and hard drives
     out-of-box.  It can be emulated for many FTN software, by manually
     copying files in its inbound/outbound directories.  But UUCP and
     SMTP software requires more manual work to do so.


File: nncp.info,  Node: Use cases,  Next: Workflow,  Prev: Comparison,  Up: Top

Use cases
*********

See also this page *note on russian: Сценарии.

* Menu:

* Occasional connection to mail server: UsecaseMail.
* Lightweight fast POP3/IMAP4 replacement: UsecasePOP.
* Unreliable/expensive communication link: UsecaseUnreliable.
* Slow/expensive link for high-volume data, bad QoS: UsecaseQoS.
* Extreme terrestrial environments, no link: UsecaseNoLink.
* One-way broadcasting communications: UsecaseBroadcast.
* Satellite links: UsecaseSatelliteLinks.
* Private, isolated MitM/Sybil-resistant networks: UsecaseF2F.
* Highly secure isolated air-gap computers: UsecaseAirgap.
* Network censorship bypassing, health: UsecaseCensor.
* Reconnaissance, spying, intelligence, covert agents: UsecaseSpy.
* Cheap night transfers: UsecaseCaller.


File: nncp.info,  Node: UsecaseMail,  Next: UsecasePOP,  Up: Use cases

Occasional connection to mail server
====================================

Assume that you have got your own Postfix (http://www.postfix.org/) SMTP
server connected to the Internet.  But you read and write emails on your
notebook, that is connected to it just from time to time.  How can you
flush buffered mail queues when your notebook is connected?

   One possibility is to log in and run something like ‘postqueue -f’,
but by default you have got only several days so and sender will receive
notification emails that his messages still are not delivered yet.  Also
you must have secure link (SSH, VPN, etc).

   Another possibility is to use POP3/IMAP4 servers, but this is too
overcomplicated and bloated for the simple task.  Not an option.  KISS
(https://en.wikipedia.org/wiki/KISS_principle)!

   Just tell both of your Postfixes (on the server and notebook) to drop
email as a mail via NNCP (*note nncp-exec::) to specified node.  This is
done similarly as with UUCP and as written in Postfix documentation
(http://www.postfix.org/UUCP_README.html).

   Look *note here: Postfix. for further information.  All mail will be
stored in NNCP *note spool: Spool, that after exchanging and tossing
will call local ‘sendmail’ command to deliver them just like that
happened on the same machine.


File: nncp.info,  Node: UsecasePOP,  Next: UsecaseUnreliable,  Prev: UsecaseMail,  Up: Use cases

Lightweight fast POP3/IMAP4 replacement
=======================================

*note nncp-daemon:: can be connected with *note nncp-caller:: for a long
time – it can create TCP connection that lasts for many hours.  When
SMTP server receives mail, it will call *note nncp-exec:: creating an
outbound encrypted packet.  Daemon checks outbound directory each second
and immediately sends notification about undelivered packets to remote
side, that also downloads it at once.

   There are only dozens of bytes notifying about incoming packets,
dozens of bytes telling to download those packets.  Mail packets are
compressed (POP3 and IMAP4 as a rule do not).  You have lightweight,
compressed, low-delay, reliable link for the mail with strong encryption
and mutual sides authentication!


File: nncp.info,  Node: UsecaseUnreliable,  Next: UsecaseQoS,  Prev: UsecasePOP,  Up: Use cases

Unreliable/expensive communication link
=======================================

Assume that you have got slow modem/radio/cellular link that frequently
disconnects and causes TCP timeouts.  Not all HTTP servers support file
download continuation.  SMTP does not support resuming at all and heavy
messages is problematic to retrieve.  Moreover, each disconnect leads to
the same data retransmission again, that can not be afforded sometimes.

   Just send your *note mail: nncp-exec. and *note files: nncp-file.
through NNCP. You can use either offline delivery methods – read about
them in the next section, or you can use included NNCP *note TCP daemon:
nncp-daemon.

   The command:

     $ nncp-file file_i_want_to_send bob:
     $ nncp-file another_file bob:movie.avi

   will queue two files for sending to _bob_ node.  Fire and forget!
Now this is daemon’s job (or offline transfer) to send this files part
by part to remote system when it is available.


File: nncp.info,  Node: UsecaseQoS,  Next: UsecaseNoLink,  Prev: UsecaseUnreliable,  Up: Use cases

Slow/expensive link for high-volume data, bad QoS
=================================================

Assume that you can give your relatively cheap 2 TiB removable hard
drive to someone each day at the morning (and take it back at the
evening).  This equals to 185 Mbps good quality (without any speed
degradation) link in single direction.  What about more and bigger hard
drives?  This type of data exchange is called sneakernet
(https://en.wikipedia.org/wiki/Sneakernet)/floppynet.

   NNCP allows traffic *note prioritizing: Niceness.: each packet has
niceness level, that will guarantee that it will be processed earlier or
later than the other ones.  Nearly all commands has corresponding
option:

     $ nncp-file -nice FLASH myfile node:dst
     $ nncp-xfer -nice PRIORITY /mnt/shared
     $ nncp-call -nice NORMAL bob
     [...]

   Huge files could be split on smaller *note chunks: Chunked, giving
possibility to transfer virtually any volumes using small capacity
storages.

   You can also use CD-ROM and tape drives:

     $ nncp-bundle -tx bob | cdrecord -tao -
     $ nncp-bundle -tx bob | dd of=/dev/sa0 bs=10240


File: nncp.info,  Node: UsecaseNoLink,  Next: UsecaseBroadcast,  Prev: UsecaseQoS,  Up: Use cases

Extreme terrestrial environments, no link
=========================================

This is some kind of too slow link.  Offline delivery methods is the
only choice.  Just send files as shown in previous section, but use
removable media for transferring packets to other nodes.

   Assume that you send two files to _bob_ node.  Insert USB storage
device (SD is preferable!), mount it and run *note nncp-xfer:::

     $ nncp-xfer -node bob /media/usbstick

   to copy all outbound packets related to _bob_.  Use ‘-mkdir’ option
to create related directory on USB/SD storage if they are missing (for
example when running for the first time).

   If you use single storage device to transfer data both to _bob_ and
_alice_, then just omit ‘-node’ option to copy all available outgoing
packets.

     $ nncp-xfer /media/usbstick

   Unmount it and transfer storage to Bob and Alice.  When they will
insert it in their computers, they will use exactly the same command:

     $ nncp-xfer /media/usbstick

   to find all packets related to their node and copy them locally for
further processing.  ‘nncp-xfer’ is the only command used with removable
devices.


File: nncp.info,  Node: UsecaseBroadcast,  Next: UsecaseSatelliteLinks,  Prev: UsecaseNoLink,  Up: Use cases

One-way broadcasting communications
===================================

Sometimes you have got high-bandwidth but unidirectional link, for
example, satellite’s broadcasting signal.  You are not able to use
online *note synchronization protocol: Sync. because it requires mutual
interaction.

   You can use *note bundles: Bundles. and stream them above.  They are
just a sequence of *note encrypted packets: Encrypted. you can catch on.

     $ nncp-bundle -tx alice bob eve ... | command to send broadcast
     $ command to receive broadcast | nncp-bundle -rx

   With built-in packet duplicates detection ability, you can retransmit
your broadcasts from time to time, to increase chances the recipient
will catch them by regular stream listening.


File: nncp.info,  Node: UsecaseSatelliteLinks,  Next: UsecaseF2F,  Prev: UsecaseBroadcast,  Up: Use cases

Satellite links
===============

Satellite links have *very* high delays together with high bandwidths.
You can send several megabits of data per second, but they will reach
the remote side only after half a second!  Most file sharing protocols
like FISH
(https://en.wikipedia.org/wiki/Files_transferred_over_shell_protocol),
FTP (https://en.wikipedia.org/wiki/FTP), scp
(https://en.wikipedia.org/wiki/Secure_copy), XMODEM
(https://en.wikipedia.org/wiki/XMODEM) will perform very badly because
of round-trips quantity.  Each file transmission explicitly generates
request and acknowledgement packets that are send over the link.  Remote
side won’t do anything until it receives them.  Moreover not all
protocols allow duplex data transmission (when both sides are sending
data simultaneously).

   NNCP’s *note synchronization protocol: Sync. (SP) tries to mitigate
all that issues by reducing number of round-trips, number of packets
passing through.  All file lists, file download requests are grouped
together (pipelined) in one huge packet.  Only transmission halt and
successful file download acknowledgements are sent explicitly.  SP could
be asked only either to upload or download packets for our node.  SP
could ignore files with low priority.  Full files listing is passing
even during the handshake procedure.


File: nncp.info,  Node: UsecaseF2F,  Next: UsecaseAirgap,  Prev: UsecaseSatelliteLinks,  Up: Use cases

Private, isolated MitM/Sybil-resistant networks
===============================================

All Internet connections can be eavesdropped and forged.  You *have to*
to use encryption and authentication for securing them.  But it is very
hard to secure metadata, that leaks during each online session.  When
you start your shiny new software server be sure that there could be
huge quantity of bogus peers trying to perform Sybil attack
(https://en.wikipedia.org/wiki/Sybil_attack).  Opennet peer-to-peer
networking is dangerous thing to do.

   The most popular cryptographic protocol in Internet is TLS
(https://en.wikipedia.org/wiki/Transport_Layer_Security) that is very
hard to implement correctly and hard to configure for mutual
participants authentication.  Not all TLS configurations and related
protocols provide forward secrecy
(https://en.wikipedia.org/wiki/Forward_secrecy) property – all
previously intercepted packets could be read if private keys are
compromised.

   Friend-to-friend networks, darknets can mitigate risks related to
fake and forged nodes.  However they are harder to support and require
more time to be done right.

   NNCP’s *note TCP daemon: nncp-daemon. uses Noise-IK
(http://noiseprotocol.org/) protocol to mutually authenticate peers and
provide effective (both participants send payload in the very first
packet) secure transport with forward secrecy property.

     $ nncp-daemon -bind "[::]":5400

   will start TCP daemon listening on all interfaces for incoming
connections.

     $ nncp-call bob

   will try to connect to _bob_’s node known TCP addresses (taken from
configuration file) and send all related outbound packets and retrieve
those the Bob has.  All interrupted transfers will be automatically
resumed.


File: nncp.info,  Node: UsecaseAirgap,  Next: UsecaseCensor,  Prev: UsecaseF2F,  Up: Use cases

Highly secure isolated air-gap computers
========================================

If you worry much about security, then air-gapped computer could be the
only choice you can afford.  Computer without any modems, wired and
wireless networks.  Obviously the only possibility to exchange mail and
files is to use physically removable storage devices like CD-ROM, hard
drive, SD, tape and USB flash drives (*worst* choice, due to those
devices complexity).

   Presumably you have got another own hop before that computer: another
intermediate node which performs basic verification of retrieved storage
devices, possibly by rewriting the data from USB/hard drives to CD-RWs.

   NNCP supports packets relying (transitioning) out-of-box.

neigh: {
  bob: {
    [...]
    addrs: {
      lan: "[fe80::5400%igb0]:5400"
    }
  }
  bob-airgap:
    [...]
    via: ["bob"]
  }
}

   That *note configuration file: Configuration. tells that we have got
two known neighbours: _bob_ and _bob-airgap_.  _bob_ can be reached via
online connection using _lan_ address.  _bob-airgap_ can be reached by
sending intermediate relay packet through the _bob_.

   Any command like ‘nncp-file myfile bob-airgap:’ will automatically
create an encapsulated packet: one for the destination endpoint, and
other carrying it for intermediate relaying node.

   Pay attention that relaying node knows nothing about the packet
inside, but just its size and priority.  Transition packets are
encrypted too: using well-known onion routing
(https://en.wikipedia.org/wiki/Onion_routing) technology.  _bob_ can not
read _bob-airgap_’s packets.


File: nncp.info,  Node: UsecaseCensor,  Next: UsecaseSpy,  Prev: UsecaseAirgap,  Up: Use cases

Network censorship bypassing, health
====================================

This is some kind of bad link too.  Some governments tend to forbid
*any* kind of private communication between people, allowing only
entertainment content delivering and popular social networks access
(that are already bloated with advertisements, locally executed
proprietary (https://www.gnu.org/philosophy/free-sw.html) JavaScript
code (for spying on user activities, collect data on them), shamelessly
exploiting the very basic human need of communication).

   This is their natural wish.  But nobody forces you to obey huge
corporations like Apple, Google or Microsoft.  It is your choice to
create an isolated friend-to-friend network with piles of harmless
content and private messaging.  Only predators silently watch for their
victims in mammals world – it harms your health being watched and
feeling that you are the victim that has already done something wrong.


File: nncp.info,  Node: UsecaseSpy,  Next: UsecaseCaller,  Prev: UsecaseCensor,  Up: Use cases

Reconnaissance, spying, intelligence, covert agents
===================================================

Those guys know how Internet is a dangerous place incompatible with
privacy.  They require quick, fast dropping and picking of data.  No
possibility of many round-trips – just drop the data, fire-and-forget.
It could be either removable media again and/or USB dead drops
(https://en.wikipedia.org/wiki/USB_dead_drop), PirateBox
(https://en.wikipedia.org/wiki/PirateBox)es, SRAC
(https://en.wikipedia.org/wiki/Short-range_agent_communications).  Short
lived short range networks like Bluetooth and WiFi can also be pretty
fast, allowing to quickly fire chunks of queued packets.

   Very important property is that compromising of those dead drops and
storages must be neither fatal nor even dangerous.  Packets sent through
the network and exchanged via those devices are end-to-end *note
encrypted: Encrypted. (but unfortunately lacking forward secrecy).  No
filenames, mail recipients are seen.

   All node communications are done with so-called *note spool: Spool.
area: directory containing only those unprocessed encrypted packets.
After packet transfer you still can not read any of them: you have to
run another stage: *note tossing: nncp-toss, that involves your private
cryptographic keys.  So even if your loose your computer, storage
devices and so on – it is not so bad, because you are not carrying
private keys with it (don’t you?), you do not "toss" those packets
immediately on the same device.  Tossing (reading those encrypted
packets and extracting transferred files and mail messages) could and
should be done on a separate computer (*note nncp-cfgmin:: command could
help creating configuration file without private keys for that purpose).

   If you really want to carry your private keys, then *note
nncp-cfgenc:: command will be able to encrypt your configuration file.
Passphrase you enter is strengthened with both CPU and memory hard
function.


File: nncp.info,  Node: UsecaseCaller,  Prev: UsecaseSpy,  Up: Use cases

Cheap night transfers
=====================

Your Internet/telephone traffic price can vary, depending on daytime.
Night calls/connections could be twice as cheaper.  You wish to send
your files at that time, but keep high priority email infrequently
passing through in anytime.  Also you wish to pass any kind of traffic
when the node is available through the LAN.

   You can easily set your preferences in *note call configurations:
Call. for *note nncp-caller:: command used in online communications.

neigh: {
  [...]
  some-node: {
    [...]
    addrs: {
      lan: "[fe80::be5f:f4ff:fedd:2752%igb0]:5400"
      wan: "some-node.com:5400"
    }
    calls: [
      {
        cron: "*/1 * * * *"
        addr: lan
        nice: MAX
        onlinedeadline: 3600
      },
      {
        cron: "*/10 * * * *"
        addr: wan
        nice: PRIORITY
        xx: rx
      },
      {
        cron: "*/1 0-7 * * *"
        addr: wan
        nice: BULK
        onlinedeadline: 3600
        maxonlinetime: 3600
      },
    ]
  }
}


File: nncp.info,  Node: Workflow,  Next: News,  Prev: Use cases,  Up: Top

Workflow
********

NNCP consists of several utilities.  As a rule you will have the
following workflow:

  1. Run *note nncp-cfgnew:: on each node to create an initial *note
     configuration: Configuration. file.
  2. Tune it up and set at least *note spool: Spool. and log paths.
  3. Share your public keys and reachability addressees with your
     neighbours.  Add their keys to your configuration file and do any
     other required configuration about their reachability, permissions
     of file or freq transmission.
  4. Use *note nncp-file::, *note nncp-freq::, *note nncp-exec:: (*note
     look how: Postfix. Postfix SMTP server could be configured)
     commands to queue file, freq and exec transmissions.  Repeat as
     many times any time as you wish.
  5. Depending on connection methods, either:
        • run *note nncp-daemon:: to accept remotely initiated
          connections to your node
        • run either *note nncp-call:: or *note nncp-caller:: to
          initiate connection to required nodes from time to time
        • use *note nncp-xfer:: with removable storage devices for
          copying packets to/from other nodes
        • use *note nncp-bundle:: with either sequential storage devices
          or broadcasting transmissions for copying packets
  6. After successful packet exchanging (or just simply from time to
     time), run *note nncp-toss:: for tossing (decrypting and
     processing) all inbound queues to receive exec messages, files,
     file requests and relay transition packets to other nodes.

   • If you wish to encrypt your configuration file containing your
     private keys, then use *note nncp-cfgenc:: utility.  You can always
     use an encrypted config without decrypting it in temporary memory
     file.
   • If you wish to strip off any private keys from your config, then
     use *note nncp-cfgmin:: utility.  It will be useful for
     transferring messages with offline methods, but tossing them later
     on the machine with private keys.


File: nncp.info,  Node: News,  Next: Русский,  Prev: Workflow,  Up: Top

News
****

See also this page *note on russian: Новости.

* Menu:

* Release 5.3.3::
* Release 5.3.2::
* Release 5.3.1::
* Release 5.3.0::
* Release 5.2.1::
* Release 5.2.0::
* Release 5.1.2::
* Release 5.1.1::
* Release 5.1.0::
* Release 5.0.0::
* Release 4.1::
* Release 4.0::
* Release 3.4::
* Release 3.3::
* Release 3.2::
* Release 3.1::
* Release 3.0::
* Release 2.0::
* Release 1.0::
* Release 0.12::
* Release 0.11::
* Release 0.10::
* Release 0.9::
* Release 0.8::
* Release 0.7::
* Release 0.6::
* Release 0.5::
* Release 0.4::
* Release 0.3::
* Release 0.2::


File: nncp.info,  Node: Release 5.3.3,  Next: Release 5.3.2,  Up: News

Release 5.3.3
=============

   • More various error checks.

   • Updated dependencies.


File: nncp.info,  Node: Release 5.3.2,  Next: Release 5.3.1,  Prev: Release 5.3.3,  Up: News

Release 5.3.2
=============

   • Fixed incorrect logic of ‘onlinedeadline’ timeout, where connection
     won’t take into account incoming packets events and will forcefully
     disconnect.


File: nncp.info,  Node: Release 5.3.1,  Next: Release 5.3.0,  Prev: Release 5.3.2,  Up: News

Release 5.3.1
=============

   • Fixed ‘onlinedeadline’ workability with call addresses that use
     external commands ("|somecmd").

   • ‘nncp-stat’ has ‘-pkt’ option displaying information about each
     packet in the spool.


File: nncp.info,  Node: Release 5.3.0,  Next: Release 5.2.1,  Prev: Release 5.3.1,  Up: News

Release 5.3.0
=============

   • Progress messages contain prefix, describing the running action.

   • Fixed not occurring handshake messages padding.

   • Finish all SP protocol related goroutines, less memory leak.

   • SP protocol generates less socket write calls, thus generating less
     TCP packets.

   • Check ‘onlinedeadline’ and ‘maxonlinetime’ options every second,
     independently from socket reads (up to 10 seconds).

   • Once per minute, if no other traffic exists, PING packets are sent
     in SP-connection.  That allows faster determining of connection
     unworkability.

   • ‘nncp-toss’ uses lock-file to prevent simultaneous tossing.


File: nncp.info,  Node: Release 5.2.1,  Next: Release 5.2.0,  Prev: Release 5.3.0,  Up: News

Release 5.2.1
=============

   • Fixed SP protocol error handling, sometimes causing program panic.


File: nncp.info,  Node: Release 5.2.0,  Next: Release 5.1.2,  Prev: Release 5.2.1,  Up: News

Release 5.2.0
=============

   • Most commands by default show oneline operations progress.
     ‘-progress’, ‘-noprogress’ command line options, ‘noprogress’
     configuration file option appeared.

   • Fixed incorrect ‘nncp-check’ command return code, that returned bad
     code when everything is good.

   • Free disk space check during ‘nncp-bundle -rx’ call.


File: nncp.info,  Node: Release 5.1.2,  Next: Release 5.1.1,  Prev: Release 5.2.0,  Up: News

Release 5.1.2
=============

   • *Critical* vulnerability: remote peers authentication could lead to
     incorrect identification of remote side, allowing foreign encrypted
     packets downloading.

   • Bugfix: private and public Noise keys were swapped in newly created
     configuration files, that lead to inability to authenticate online
     peers.

   • Explicit directories fsync-ing for guaranteed files renaming.


File: nncp.info,  Node: Release 5.1.1,  Next: Release 5.1.0,  Prev: Release 5.1.2,  Up: News

Release 5.1.1
=============

   • Fixed workability of ‘nncp-file’ with ‘-chunked 0’ option.


File: nncp.info,  Node: Release 5.1.0,  Next: Release 5.0.0,  Prev: Release 5.1.1,  Up: News

Release 5.1.0
=============

   • ‘nncp-file’ can send directories, automatically creating pax
     archive on the fly.

   • Free disk space is checked during outbound packets creation.

   • ‘freq’, ‘freqminsize’, ‘freqchunked’ configuration file options
     replaced with the structure: ‘freq: {path: ..., minsize: ...,
     chunked: ...}’.

   • Added ‘freq.maxsize’ configuration file option, forbidding of freq
     sending larger than specified size.

   • Ability to notify about successfully executed commands (exec) with
     ‘notify.exec’ configuration file option.


File: nncp.info,  Node: Release 5.0.0,  Next: Release 4.1,  Prev: Release 5.1.0,  Up: News

Release 5.0.0
=============

   • *Incompatible* configuration file format change: YAML is replaced
     with Hjson, due to its simplicity, without noticeable lack of
     either functionality or convenience.

   • *Incompatible* plain packet format changes.  Older versions are not
     supported.  ‘zlib’ compression is replaced with ‘Zstandard’, due to
     its speed and efficiency, despite library version is not mature
     enough.

   • Ability to call remote nodes via pipe call of external command, not
     only through TCP.

   • ‘nncp-cfgnew’ generates configuration file with many comments.
     ‘-nocomments’ option can be used for an old behaviour.

   • Duplicate filenames have ‘.CTR’ suffix, instead of ‘CTR’, to avoid
     possible collisions with ‘.nncp.chunkCTR’.

   • Ability to override process umask through configuration file
     option.

   • Files and directories are created with 666/777 permissions by
     default, allowing control with ‘umask’.

   • Updated dependencies.

   • Full usage of go modules for dependencies management
     (‘go.cypherpunks.ru/nncp/v5’ namespace is used).

   • Forbid any later GNU GPL version autousage (project’s licence now
     is GNU GPLv3-only).


File: nncp.info,  Node: Release 4.1,  Next: Release 4.0,  Prev: Release 5.0.0,  Up: News

Release 4.1
===========

   • Workability on GNU/Linux systems and Go 1.10 is fixed.


File: nncp.info,  Node: Release 4.0,  Next: Release 3.4,  Prev: Release 4.1,  Up: News

Release 4.0
===========

   • *Incompatible* encrypted and eblob packet format change: AEAD
     encryption mode with 128 KiB blocks is used now, because previously
     ‘nncp-toss’ did not verify encrypted packet’s MAC before feeding
     decrypted data to external command.  Older versions are not
     supported.

   • Available free space checking before copying in ‘nncp-xfer’,
     ‘nncp-daemon’, ‘nncp-call(er)’.

   • ‘nncp-call’ has ability only to list packets on remote node,
     without their transmission.

   • ‘nncp-call’ has ability to transfer only specified packets.

   • Workability of ‘xxrate’ preference in ‘calls’ configuration file
     section.

   • Dependant libraries are updated.

   • Minor bugfixes.

   • Begin using of ‘go.mod’ subsystem.


File: nncp.info,  Node: Release 3.4,  Next: Release 3.3,  Prev: Release 4.0,  Up: News

Release 3.4
===========

   • ‘nncp-daemon’ can be run as ‘inetd’-service.


File: nncp.info,  Node: Release 3.3,  Next: Release 3.2,  Prev: Release 3.4,  Up: News

Release 3.3
===========

   • ‘nncp-daemon’, ‘nncp-call’, ‘nncp-caller’ check if ‘.seen’ exists
     and treat it like file was already downloaded.  Possibly it was
     transferred out-of-bound and remote side needs to be notifier about
     that.

   • If higher priority packet is spooled, then ‘nncp-daemon’ will queue
     its sending first, interrupting lower priority transmissions.

   • Simple packet rate limiter added to online-related tools
     (‘nncp-daemon’, ‘nncp-call’, ‘nncp-caller’).

   • Ability to specify niceness with symbolic notation: NORMAL,
     BULK+10, PRIORITY-5, etc.

   • Changed default niceness levels: for ‘nncp-exec’ from 64 to 96, for
     ‘nncp-freq’ from 64 to 160, for ‘nncp-file’ from 196 to 224.


File: nncp.info,  Node: Release 3.2,  Next: Release 3.1,  Prev: Release 3.3,  Up: News

Release 3.2
===========

   • *Incompatible* _bundle_ archive format changes and ‘nncp-bundle’
     workability with Go 1.10+.  Bundles must be valid tar archives, but
     Go 1.9 made them invalid because of long paths inside.  NNCP
     accidentally was dependant on that bug.  Explicit adding of ‘NNCP/’
     directory in archive restores workability with valid tar archives.


File: nncp.info,  Node: Release 3.1,  Next: Release 3.0,  Prev: Release 3.2,  Up: News

Release 3.1
===========

   • Ability to disable relaying at all using -via - command line
     option.


File: nncp.info,  Node: Release 3.0,  Next: Release 2.0,  Prev: Release 3.1,  Up: News

Release 3.0
===========

   • *Incompatible* plain packet format changes.  Older versions are not
     supported.

   • Ability to queue remote command execution, by configuring ‘exec’
     option in configuration file and using ‘nncp-exec’ command:
        • ‘nncp-mail’ command is replaced with more flexible
          ‘nncp-exec’.  Instead of nncp-mail NODE RECIPIENT you must use
          nncp-exec NODE sendmail RECIPIENT.
        • ‘sendmail’ configuration file option is replaced with ‘exec’.
          sendmail: [...] must be replaced with exec: sendmail: [...].

   • Ability to override ‘via’ configuration option for destination node
     via ‘-via’ command line option for following commands: ‘nncp-file’,
     ‘nncp-freq’, ‘nncp-exec’.

   • Chunked files, having size less than specified chunk size, will be
     sent as an ordinary single file.

   • Exec commands are invoked with additional ‘NNCP_NICE’ and
     ‘NNCP_SELF’ environment variables.

   • Files, that are sent as a reply to freq, have niceness level taken
     from the freq packet.  You can set desired niceness during
     ‘nncp-freq’ invocation using ‘-replynice’ option.

   • ‘nncp-toss’ command can ignore specified packet types during
     processing: ‘-nofile’, ‘-nofreq’, ‘-noexec’, ‘-notrns’.

   • ‘nncp-file’ command uses ‘FreqMinSize’/‘FreqChunked’ configuration
     file options for ‘-minsize’/‘-chunked’ by default.  You can turn
     this off by specifying zero value.


File: nncp.info,  Node: Release 2.0,  Next: Release 1.0,  Prev: Release 3.0,  Up: News

Release 2.0
===========

   • *Incompatible* encrypted/eblob packet format changes.  Older
     versions are not supported.

   • Twofish encryption algorithm is replaced with ChaCha20.  It is much
     more faster.  One cryptographic primitive less.

   • HKDF-BLAKE2b-256 KDF algorithm is replaced with BLAKE2Xb XOF. Yet
     another cryptographic primitive less (assuming that BLAKE2X is
     nearly identical to BLAKE2).


File: nncp.info,  Node: Release 1.0,  Next: Release 0.12,  Prev: Release 2.0,  Up: News

Release 1.0
===========

   • *Incompatible* encrypted packet format changes.  Older versions are
     not supported.

   • ‘nncp-bundle’ command can either create stream of encrypted
     packets, or digest it.  It is useful when dealing with stdin/stdout
     based transmission methods (like writing to CD-ROM without
     intermediate prepared ISO image and working with tape drives).

   • ‘nncp-toss’ is able to create ‘.seen’ files preventing duplicate
     packets receiving.

   • Single background checksum verifier worker is allowed in
     ‘nncp-call’.  This is helpful when thousands of small inbound
     packets could create many goroutines.

   • Ability to override path to spool directory and logfile through
     either command line argument, or environment variable.

   • ‘nncp-rm’ is able to delete outbound/inbound, ‘.seen’, ‘.part’,
     ‘.lock’ and temporary files.


File: nncp.info,  Node: Release 0.12,  Next: Release 0.11,  Prev: Release 1.0,  Up: News

Release 0.12
============

   • Sendmail command is called with ‘NNCP_SENDER’ environment variable.


File: nncp.info,  Node: Release 0.11,  Next: Release 0.10,  Prev: Release 0.12,  Up: News

Release 0.11
============

   • ‘nncp-stat’’s command output is sorted by node name.


File: nncp.info,  Node: Release 0.10,  Next: Release 0.9,  Prev: Release 0.11,  Up: News

Release 0.10
============

   • ‘nncp-freq’’s ‘DST’ argument is optional now.  Last ‘SRC’ path’s
     element will be used by default.


File: nncp.info,  Node: Release 0.9,  Next: Release 0.8,  Prev: Release 0.10,  Up: News

Release 0.9
===========

   • Fix ‘-rx’/‘-tx’ arguments processing in ‘nncp-call’ command.  They
     were ignored.


File: nncp.info,  Node: Release 0.8,  Next: Release 0.7,  Prev: Release 0.9,  Up: News

Release 0.8
===========

   • Little bugfix in ‘nncp-file’ command, where ‘-minsize’ option for
     unchunked transfer was not in KiBs, but in bytes.


File: nncp.info,  Node: Release 0.7,  Next: Release 0.6,  Prev: Release 0.8,  Up: News

Release 0.7
===========

   • Ability to feed ‘nncp-file’ from stdin, that uses an encrypted
     temporary file for that.

   • Chunked files transmission appeared with corresponding ‘nncp-reass’
     command and ‘freqchunked’ configuration file entry.  Useful for
     transferring big files over small storage devices.

   • ‘freqminsize’ configuration file option, analogue to ‘-minsize’
     one.

   • ‘nncp-xfer’’s ‘-force’ option is renamed to ‘-mkdir’ for clarity.

   • ‘-minsize’ option is specified in KiBs, not bytes, for convenience.

   • ‘nncp-newcfg’ command is renamed to ‘nncp-cfgnew’, and
     ‘nncp-mincfg’ to ‘nncp-cfgmin’ – now they have common prefix and
     are grouped together for convenience.

   • ‘nncp-cfgenc’ command appeared, allowing configuration file
     encryption/decryption, for keeping it safe without any either
     OpenPGP or similar tools usage.

   • Cryptographic libraries (dependencies) are updated.


File: nncp.info,  Node: Release 0.6,  Next: Release 0.5,  Prev: Release 0.7,  Up: News

Release 0.6
===========

   • Small ‘nncp-rm’ command appeared.
   • Cryptographic libraries (dependencies) are updated.


File: nncp.info,  Node: Release 0.5,  Next: Release 0.4,  Prev: Release 0.6,  Up: News

Release 0.5
===========

   • Trivial small fix in default niceness level of ‘nncp-file’ and
     ‘nncp-freq’ commands.


File: nncp.info,  Node: Release 0.4,  Next: Release 0.3,  Prev: Release 0.5,  Up: News

Release 0.4
===========

   • Small fix in ‘nncp-call’, ‘nncp-caller’, ‘nncp-daemon’: they can
     segmentation fail sometimes (no data is lost).

   • ‘nncp-newnode’ renamed to ‘nncp-newcfg’ – it is shorter and more
     convenient to use.

   • ‘nncp-mincfg’ command appeared: helper allowing to create
     minimalistic stripped down configuration file without private keys,
     that is useful during ‘nncp-xfer’ usage.


File: nncp.info,  Node: Release 0.3,  Next: Release 0.2,  Prev: Release 0.4,  Up: News

Release 0.3
===========

   • Fixed compatibility with Go 1.6.


File: nncp.info,  Node: Release 0.2,  Prev: Release 0.3,  Up: News

Release 0.2
===========

   • *Incompatible* packet’s format change (magic number is changed
     too): size field is encrypted and is not send in plaintext anymore.

   • ‘-minsize’ option gives ability to automatically pad outgoing
     packets to specified minimal size.

   • ‘nncp-daemon’ and ‘nncp-call’/‘nncp-caller’ always check new _tx_
     packets appearance in the background while connected.  Remote side
     is immediately notified.

   • ‘-onlinedeadline’ option gives ability to configure timeout of
     inactivity of online connection, when it could be disconnected.  It
     could be used to keep connection alive for a long time.

   • ‘-maxonlinetime’ option gives ability to set maximal allowable
     online connection aliveness time.

   • ‘nncp-caller’ command appeared: cron-ed TCP daemon caller.

   • ‘nncp-pkt’ command can decompress the data.


File: nncp.info,  Node: Русский,  Next: Installation,  Prev: News,  Up: Top

Информация на русском
*********************

* Menu:

* Подробнее об утилитах NNCP: Об утилитах.
* Сравнение с существующими решениями: Сравнение.
* Сценарии использования: Сценарии.
* Новости::


File: nncp.info,  Node: Об утилитах,  Next: Сравнение,  Up: Русский

Подробнее об утилитах NNCP
==========================

*NNCP* (Node to Node copy) это набор утилит упрощающий безопасный обмен
файлами, почтой и командами в режиме сохранить-и-переслать.

   Эти утилиты предназначены помочь с построением однораговых устойчивых
к разрывам (https://ru.wikipedia.org/wiki/DTN) сетей небольшого размера
(дюжины узлов), в режиме друг-к-другу
(https://ru.wikipedia.org/wiki/Friend-to-friend) (F2F) со статической
маршрутизацией для безопасной надёжной передачи файлов, запросов на
передачу файлов, Интернет почты и команд по принципу выстрелил-и-забыл.
Все пакеты проверяются на целостность, шифруются по принципу точка-точка
(https://en.wikipedia.org/wiki/End-to-end_encryption), аутентифицируются
известными публичными ключами участников.  Луковичное
(https://ru.wikipedia.org/wiki/%D0%9B%D1%83%D0%BA%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%B0%D1%80%D1%88%D1%80%D1%83%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F)
(onion) шифрование применяется ко всем ретранслируемым пакетам.  Каждый
узел выступает одновременно в роли клиента и сервера, может использовать
как push, так и poll модель поведения.

   Поддержка из коробки offline флоппинета
(https://ru.wikipedia.org/wiki/%D0%A4%D0%BB%D0%BE%D0%BF%D0%BF%D0%B8%D0%BD%D0%B5%D1%82),
тайников
(https://ru.wikipedia.org/wiki/%D0%A2%D0%B0%D0%B9%D0%BD%D0%B8%D0%BA) для
сброса информации (dead drop), последовательных и не перезаписываемых
CD-ROM (https://ru.wikipedia.org/wiki/CD-ROM)/ленточных
(https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%B8%D0%BC%D0%B5%D1%80)
хранилищ, компьютеров с воздушным зазором
(https://ru.wikipedia.org/wiki/%D0%92%D0%BE%D0%B7%D0%B4%D1%83%D1%88%D0%BD%D1%8B%D0%B9_%D0%B7%D0%B0%D0%B7%D0%BE%D1%80_(%D1%81%D0%B5%D1%82%D0%B8_%D0%BF%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B8_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85))
(air-gap).  Но также существует и online TCP демон с полнодуплексной
возобновляемой передачей данных.

   Узнайте о возможных *note сценариях использования: Сценарии.!

   NNCP это копилефт (https://www.gnu.org/philosophy/pragmatic.ru.html)
свободное программное обеспечение
(https://www.gnu.org/philosophy/free-sw.ru.html): лицензировано под
условиями GNU GPLv3 (https://www.gnu.org/licenses/gpl-3.0.ru.html).  Оно
должно работать на всех POSIX
(https://ru.wikipedia.org/wiki/POSIX)-совместимых системах.  Лёгкая
*note интеграция: Integration. с существующими SMTP
(https://ru.wikipedia.org/wiki/SMTP) серверами.  Единственный
конфигурационный Hjson (https://hjson.org/) файл.

   Зачем создавать ещё одно решение с принципом сохранить-и-переслать
когда уже существуют UUCP, FTN и даже SMTP? Посмотрите *note сравнение:
Сравнение.!  Простота, криптографическая безопасность, совместимость с
флоппинетом и лёгкая интеграция с существующими SMTP серверами – вот и
причины.


File: nncp.info,  Node: Сравнение,  Next: Сценарии,  Prev: Об утилитах,  Up: Русский

Сравнение с существующими решениями
===================================

Это сравнение UUCP (https://ru.wikipedia.org/wiki/Uucp) (Unix to Unix
copy), FTN (https://ru.wikipedia.org/wiki/FTN) (FidoNet
(https://ru.wikipedia.org/wiki/%D0%A4%D0%B8%D0%B4%D0%BE)) и SMTP
(https://ru.wikipedia.org/wiki/SMTP) (так как это тоже
сохранить-и-переслать режим).

                              UUCP        FTN         NNCP        SMTP
                                                                  
------------------------------------------------------------------------------
Простота настройки            Средне      Сложно      Легко       Сложно
Передача почты                *Да*        *Да*        *Да*        *Да*
Передача новостей             *Да*        *Да*        Нет         Нет
Передача файлов               *Да*        *Да*        *Да*        Нет
Разбиение файлов на части     Нет         *Да*        *Да*        Нет
Удалённое исполнение команд   *Да*        Нет         *Да*        Нет
Возобновляемое скачивание     *Да*        *Да*        *Да*        Нет
Приоритезация пакетов         *Да*        Нет         *Да*        Нет
Сжатие почты                  Нет         *Да*        *Да*        Нет
Интеграция с SMTP             *Да*        Нет         *Да*        N/A
Push/poll модель              *Обе*       *Обе*       *Обе*       Push
DTN                           *Да*        *Да*        *Да*        Нет
Предполагаемый размер сети    Дюжины      Глобально   Дюжины      Глобально
Маршрутизация                 Ручное/статичноеФедеративноеРучное/статичноеФедеративное
Поддержка телефонной сети     *Да*        *Да*        Возможно    Нет
Анонимные участники           *Да*        Нет         Нет         *Да*
Аутентификация участников     PAP         PAP/CHAP    публичный   Нет
                                                      ключ
Шифрование пакетов            Нет         Нет         *Да*        Нет
Приватность метаданных        Нет         Нет         *Да*        Нет
Проверка целостности          Нет         Нет         *Да*        Нет
пакетов
Дружелюбность к флоппинету    Нет         Частично    *Да*        Нет
                                                                  

*Простота установки*
     UUCP относительно легко настраивается несколькими строчками в
     нескольких конфигурационных файлах.  Но вы вынуждены добавить
     дополнительный уровень шифрования и аутентификации для безопасного
     обмена данными.

     FTN сложен в настройке, потому что это совершенно другой мир
     программного обеспечения, по-сравнению с Unix-ом.  Даже редактор
     почты будет какой-нибудь GoldEd, а не обычный почтовый клиент.
     Более того, из коробки не предоставляется никакого шифрования и
     сильной аутентификации.

     NNCP требует редактирование единственного Hjson *note
     конфигурационного файла: Configuration.

*Передача новостей*
     SMTP ничего не знает о новостях, NNTP и тому подобному.  NNCP тоже
     не знает, потому что на текущий день они уже мало используются.

*Передача файлов*
     SMTP может передавать файлы только в Base64 кодировке – это очень
     не эффективно.

*Разбиение файлов на части*
     FTN программы могут автоматически разбивать огромные файлы на
     меньшие части, чтобы собрать их воедино на целевом узле.  NNCP тоже
     *note поддерживает: Chunked. эту возможность, особенно важную когда
     дело касается переносных устройств хранения небольшого объёма.

*Приоритезация пакетов*
     UUCP и NNCP сначала будут отправлять пакеты с высоким приоритетом
     ("grade" в терминологии UUCP). Ваша почта пройдёт, даже если при
     этом в очереди на отправку будут гигабайты файлов.

*Интеграция с SMTP*
     Почтовые серверы типа Postfix (http://www.postfix.org/)
     предоставляют документацию и примеры конфигурации для использования
     с UUCP. Exim (http://www.exim.org/) и Sendmail
     (http://www.sendmail.com/sm/open_source/) тоже относительно легко
     могут быть интегрированы с ним.  Для использования с NNCP, просто
     замените UUCP команды на аналогичные NNCP.

*Push/poll модель*
     С SMTP, вы вынуждены ждать в online режиме когда удалённые
     участники отправят вам сообщение.  Существуют расширения протокола
     позволяющие делать poll-модель взаимодействия, но они не везде
     доступны и используются.  Очень важно быть независимым от заданной
     модели поведения и обмениваться данными с теми возможностями
     которые у вас имеются.

*DTN (https://ru.wikipedia.org/wiki/DTN) (сеть устойчивая к разрывам)*
     SMTP удалит сообщения которые не могут быть доставлены в течении
     длительного времени (несколько дней).  Другие решения толерантны к
     длительным задержкам.

*Маршрутизация*
     UUCP и NNCP ничего не знают о маршрутизации.  Вы явно должны
     сообщать через какие и к каким узлам нужно посылать пакет.

*Поддержка телефонной сети*
     UUCP и FidoNet всегда из коробки поддерживали работу с модемами.
     Только много лет позже они получили возможность работы поверх
     TCP/IP соединений.  SMTP работает только поверх TCP/IP. NNCP на
     данный момент имеет только TCP демон, но ничего не мешает
     использовать другой 8-бит online транспорт.

*Анонимные участники*
     NNCP и FTN являются только друг-к-другу (F2F) сетью.  Это очень
     безопасно и предотвращает многие возможные атаки
     человека-по-середине (MitM) и Sybil
     (https://en.wikipedia.org/wiki/Sybil_attack).

*Дружелюбность к флоппинету*
     Никто, кроме NNCP, не поддерживает штатный обмен данными через
     переносные устройства хранения типа флеш накопителей, CD-ROM-ов,
     лент и жёстких дисков.  Это можно сэмулировать для большинства FTN
     программного обеспечения, путём ручного копирования файлов в
     входящие/исходящие директории.  Но UUCP и SMTP требуют ещё больше
     ручной работы для этого.


File: nncp.info,  Node: Сценарии,  Next: Новости,  Prev: Сравнение,  Up: Русский

Сценарии использования
======================

* Menu:

* Доступность почтового сервера время от времени: UsecaseMailRU.
* Легковесная и быстрая замена POP3/IMAP4: UsecasePOPRU.
* Ненадёжный/дорогой канал связи: UsecaseUnreliableRU.
* Медленная/дорогая связь для больших объёмов данных, плохой QoS: UsecaseQoSRU.
* Экстремальные наземные окружающие условия, нет связи: UsecaseNoLinkRU.
* Односторонняя широковещательная связь: UsecaseBroadcastRU.
* Спутниковые каналы связи: UsecaseSatelliteLinksRU.
* Частные, изолированные MitM/Sybil-устойчивые сети: UsecaseF2FRU.
* Высоко защищённые изолированные компьютеры с воздушным зазором: UsecaseAirgapRU.
* Обход сетевой цензуры, здоровье: UsecaseCensorRU.
* Разведка, шпионаж, тайная агентура: UsecaseSpyRU.
* Дешёвая ночная связь: UsecaseCallerRU.


File: nncp.info,  Node: UsecaseMailRU,  Next: UsecasePOPRU,  Up: Сценарии

Доступность почтового сервера время от времени
----------------------------------------------

Представьте, что у вас есть собственный Postfix
(http://www.postfix.org/) SMTP сервер подключённый к Интернету.  Но вы
читаете и пишете почтовые сообщения на своём ноутбуке, который
подключается к нему лишь время от времени.  Как опустошить очередь из
ожидающих сообщений когда ноутбук подключён?

   Одна из возможностей это войти на сервер и сделать что-то типа
‘postqueue -f’, но по умолчанию у вас есть только несколько дней на это,
плюс отправитель будет получать уведомления о том, что его сообщение всё
ещё не доставлено.  Кроме того, вы должны использовать безопасный канал
связи (SSH, VPN, итд).

   Другая возможность это использовать POP3/IMAP4 сервер, но это слишком
переусложнённо и громоздко для такой простой задачи.  Не вариант.  KISS
(https://ru.wikipedia.org/wiki/KISS_(%D0%BF%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF))!

   Просто скажите вашим обоим Postfix-ам (на сервере и ноутбуке)
отправлять сообщения через NNCP (*note nncp-exec::) на заданный узел.
Это делается аналогично тому как с UUCP, и описано в документации
Postfix (http://www.postfix.org/UUCP_README.html).

   Читайте *note здесь: Postfix. для более подробной информации.  Вся
почта будет сохранятся в NNCP *note спуле: Spool, который после обмена
данных и распаковки вызовет локальный ‘sendmail’ для доставки почты,
как-будто это произошло на этой же машине.


File: nncp.info,  Node: UsecasePOPRU,  Next: UsecaseUnreliableRU,  Prev: UsecaseMailRU,  Up: Сценарии

Легковесная и быстрая замена POP3/IMAP4
---------------------------------------

*note nncp-daemon:: может быть соединён с *note nncp-caller:: длительное
время – он создаёт TCP соединение на многие часы.  Когда SMTP сервер
получает письмо, то вызывает *note nncp-exec:: для создания исходящего
зашифрованного пакета.  Демон ежесекундно проверяет исходящую директорию
и сразу же посылает оповещение о недоставленных пакетах противоположной
стороне, которая сразу же их может скачать.

   Всего несколько дюжин байт оповещают о входящих пакетах, дюжины байт
начинающие доставку этих пакетов.  Почтовые пакеты сжимаются (POP3 и
IMAP4, как правило, нет).  У вас легковесный, сжатый, надёжный канал
связи с низкими задержками для почты, с сильным шифрованием и
двусторонней аутентификацией!


File: nncp.info,  Node: UsecaseUnreliableRU,  Next: UsecaseQoSRU,  Prev: UsecasePOPRU,  Up: Сценарии

Ненадёжный/дорогой канал связи
------------------------------

Представьте, что у вас медленный модем/радио/спутниковый канал связи,
который часто обрывается и вызывает timeout у TCP. Не все HTTP серверы
поддерживают возобновляемые скачивания.  SMTP вообще не поддерживает
продолжение оборванного приёма и тяжёлые сообщения становится очень
проблематично получить.  Более того, каждый обрыв может приводить к
отсылке данных с самого начала, что не всегда по карману.

   Просто отправьте вашу *note почту: nncp-exec. и *note файлы:
nncp-file. через NNCP. Вы сможете использовать или offline методы
доставки – читайте о них в следующем разделе, либо использовать
поставляемый NNCP *note TCP демон: nncp-daemon.

   Команды:

     $ nncp-file file_i_want_to_send bob:
     $ nncp-file another_file bob:movie.avi

   добавят в очередь отправки два файла для узла _bob_.
Выстрелил-и-забыл!  Теперь это работа демона (или offline передачи)
доставить частями эти файлы до удалённой системы когда она будет
доступна.


File: nncp.info,  Node: UsecaseQoSRU,  Next: UsecaseNoLinkRU,  Prev: UsecaseUnreliableRU,  Up: Сценарии

Медленная/дорогая связь для больших объёмов данных, плохой QoS
--------------------------------------------------------------

Представьте, что относительно дешёвый 2 TiB переносной жёсткий диск вы
отдаёте кому-нибудь утром каждый день (и забираете назад вечером).  Это
равносильно 185 мегабитному качественному однонаправленному каналу
связи.  Как насчёт большего количества и бОльших жёстких дисков?  Этот
метод обмена данными называется флоппинет
(https://ru.wikipedia.org/wiki/%D0%A4%D0%BB%D0%BE%D0%BF%D0%BF%D0%B8%D0%BD%D0%B5%D1%82).

   NNCP поддерживает *note приоритезацию трафика: Niceness.: каждый
пакет имеет уровень "приятности", который гарантирует что он будет
обработан раньше или позднее остальных.  Почти все команды имеют
соответствующую опцию:

     $ nncp-file -nice FLASH myfile node:dst
     $ nncp-xfer -nice PRIORITY /mnt/shared
     $ nncp-call -nice NORMAL bob
     [...]

   Огромные файлы могут быть разбиты на маленькие *note части: Chunked,
давая возможность передачи, по сути, любых объёмов используя накопители
небольших размеров.

   Вы также можете использовать CD-ROM и ленточные накопители:

     $ nncp-bundle -tx bob | cdrecord -tao -
     $ nncp-bundle -tx bob | dd of=/dev/sa0 bs=10240


File: nncp.info,  Node: UsecaseNoLinkRU,  Next: UsecaseBroadcastRU,  Prev: UsecaseQoSRU,  Up: Сценарии

Экстремальные наземные окружающие условия, нет связи
----------------------------------------------------

Это, в некотором роде, вариант очень медленного канала связи.  Offline
методы доставки – единственный выбор.  Просто отправьте, файлы как было
показано в предыдущем разделе, но используйте переносные накопители для
передачи пакетов другим узлам.

   Представьте, что вы послали два файла узлу _bob_.  Вставьте USB
устройство (SD гораздо предпочтительнее!)  хранения, подмонтируйте и
запустите *note nncp-xfer:::

     $ nncp-xfer -node bob /media/usbstick

   чтобы скопировать все исходящие пакеты относящиеся к _bob_.
Используйте ‘-mkdir’ опцию чтобы создать все необходимые директории на
накопителе, если их нет (например когда запускаемся первый раз).

   Если вы используете один и тот же накопитель для передачи данных и к
_bob_ и к _alice_, то тогда просто не указывайте ‘-node’ опцию, чтобы
скопировать все доступные исходящие пакеты.

     $ nncp-xfer /media/usbstick

   Размонтируйте и передайте накопитель Бобу и Алисе.  Когда они вставят
накопитель в свои компьютеры, то выполнят точно такую же команду:

     $ nncp-xfer /media/usbstick

   чтобы найти все пакеты относящиеся к их узлу и локально скопируют для
дальнейшей обработки.  ‘nncp-xfer’ это единственная команда используемая
с переносными устройствами хранения.


File: nncp.info,  Node: UsecaseBroadcastRU,  Next: UsecaseSatelliteLinksRU,  Prev: UsecaseNoLinkRU,  Up: Сценарии

Односторонняя широковещательная связь
-------------------------------------

Иногда у вас есть ёмкий, но односторонний, канал связи, например
широковещательный сигнал со спутника.  Вы не можете использовать online
*note протокол синхронизации: Sync, потому что он требует двустороннего
взаимодействия.

   Вы можете использовать, так называемые, *note пачки: Bundles. и
потоково отсылать их.  Они – всего-лишь последовательность *note
зашифрованных пакетов: Encrypted, которые вы можете принять.

     $ nncp-bundle -tx alice bob eve ... | команда для отправки широковещательной рассылки
     $ команда для приёма широковещательной рассылки | nncp-bundle -rx

   Встроенная возможность определять дубляжи пакетов позволит вам
переотправлять широковещательные рассылки время от времени, повышая
шансы на то, что получатель примет их, регулярно слушая рассылку.


File: nncp.info,  Node: UsecaseSatelliteLinksRU,  Next: UsecaseF2FRU,  Prev: UsecaseBroadcastRU,  Up: Сценарии

Спутниковые каналы связи
------------------------

Спутниковые каналы связи имеют *очень* большие задержки вместе с
высокими пропускными способностями.  Вы можете посылать мегабиты данных
в секунду, но они достигнут удалённой стороны только спустя полсекунды!
Большинство протоколов обмена файлами, таких как FISH
(https://en.wikipedia.org/wiki/Files_transferred_over_shell_protocol),
FTP (https://ru.wikipedia.org/wiki/FTP), scp
(https://ru.wikipedia.org/wiki/SCP), XMODEM
(https://en.wikipedia.org/wiki/XMODEM) will perform very будут работать
очень плохо из-за большого количества приёмо-передач (round-trips).
Каждая передача файла явно генерирует пакеты запросов и подтверждений,
посылаемые поверх канала связи.  Удалённая сторона ничего не будет
делать пока она их не получит.  Более того, не все протоколы позволяют
делать дуплексную отправку данных (когда обе стороны посылают данные
одновременно).

   *note Протокол синхронизации: Sync. (SP) NNCP пытается решить все эти
особенности за счёт сокращения количества приёмо-передач, количества
проходящих пакетов.  Все списки файлов, запросов на скачивание файла
группируются вместе (pipelined) в один огромный пакет.  Только запросы
на остановку передачи и подтверждения успешного приёма файла явно
посылаются.  Можно запросить чтобы SP только принимал или отправлял
пакеты для нашей ноды.  SP может игнорировать файлы с маленьким
приоритетом.  Полные списки файлов отправляются уже на этапе процедуры
рукопожатия.


File: nncp.info,  Node: UsecaseF2FRU,  Next: UsecaseAirgapRU,  Prev: UsecaseSatelliteLinksRU,  Up: Сценарии

Частные, изолированные MitM/Sybil-устойчивые сети
-------------------------------------------------

Все Интернет соединения могут быть прослушаны и сфальсифицированы.  Вы
*вынуждены* использовать шифрование и аутентификацию для безопасности.
Но очень сложно обезопасить метаданные, которые утекают при каждой
online сессии.  Когда вы запускаете свой новый сверкающий программный
сервер, то имейте в виду, что может существовать огромное количество
поддельных узлов пытающихся произвести Sybil атаку
(https://en.wikipedia.org/wiki/Sybil_attack).  Открытые узел-к-узлу
(peer-to-peer) сети опасны.

   Наиболее популярный криптографический протокол в Интернете это TLS
(https://ru.wikipedia.org/wiki/TLS), который крайне сложно правильно
реализовать и сконфигурировать для двусторонней аутентификации
собеседников.  Не все конфигурации TLS обладают свойством совершенной
прямой секретности
(https://ru.wikipedia.org/wiki/Perfect_forward_secrecy) – все ранее
перехваченные пакеты могут быть прочтены если приватные ключи
скомпрометированы.

   Друг-к-другу (friend-to-friend) сети, "тёмные сети" (darknet) могут
нивелировать возможные риски связанные с поддельными и фиктивными
узлами.  Хотя они и сложнее в поддержке и требуют больше затрат на
построение.

   *note TCP демон: nncp-daemon. NNCP использует Noise-IK
(http://noiseprotocol.org/) протокол для двусторонней аутентификации
узлов и предоставляет эффективный (оба участника могут отослать полезную
нагрузку сразу же в самом первом пакете) безопасный транспорт с
свойством совершенной прямой секретности.

     $ nncp-daemon -bind "[::]":5400

   запустит TCP демон, который будет слушать входящие соединения на всех
интерфейсах.

     $ nncp-call bob

   попытается подключиться к известному TCP-адресу узла _bob_ (взятого
из конфигурационного файла), послать все связанные с ним исходящие
пакеты и получить от него.  Все прерванные передачи будут автоматически
возобновлены.


File: nncp.info,  Node: UsecaseAirgapRU,  Next: UsecaseCensorRU,  Prev: UsecaseF2FRU,  Up: Сценарии

Высокозащищённые изолированные компьютеры с воздушным зазором
-------------------------------------------------------------

Если вы сильно беспокоитесь о безопасности, то компьютер с воздушным
зазором
(https://ru.wikipedia.org/wiki/%D0%92%D0%BE%D0%B7%D0%B4%D1%83%D1%88%D0%BD%D1%8B%D0%B9_%D0%B7%D0%B0%D0%B7%D0%BE%D1%80_(%D1%81%D0%B5%D1%82%D0%B8_%D0%BF%D0%B5%D1%80%D0%B5%D0%B4%D0%B0%D1%87%D0%B8_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85))
может будет вашим единственным позволительным выбором.  Компьютер без
каких-либо модемов, проводных и беспроводных сетей.  Очевидно, что
единственная возможность обмениваться почтой и файлами – использовать
физически переносимые устройства хранения типа CD-ROM, жёстких дисков,
SD, лент и USB накопителей (*худший* вариант, из-за сложности подобных
устройств).

   Предполагаем что у вас есть ещё один собственный узел, стоящий "до"
безопасного, который делает базовые проверки полученных накопителей,
возможно перезаписывая данные с USB/жёстких дисков на CD-RW.

   NNCP из коробки поддерживает ретрансляцию пакетов.

neigh: {
  bob: {
    [...]
    addrs: {
      lan: "[fe80::5400%igb0]:5400"
    }
  }
  bob-airgap:
    [...]
    via: ["bob"]
  }
}

   Такой *note конфигурационный файл: Configuration. говорит что у нас
есть два известных соседа: _bob_ и _bob-airgap_.  _bob_ доступен через
online соединение, используя _lan_ адрес.  _bob-airgap_ доступен путём
посылки промежуточного ретранслируемого пакета через узел _bob_.

   Любая команда типа ‘nncp-file myfile bob-airgap:’ автоматически
создаст инкапсулированный пакет: один непосредственно для целевой точки,
а другой несущий его для промежуточного узла.

   Имейте в виду, что узел-ретранслятор ничего не знает о внутреннем
пакете, кроме его полного размера и приоритета.  Все промежуточные
пакеты тоже зашифрованы: используя хорошо известную технологию луковой
маршрутизации
(https://ru.wikipedia.org/wiki/%D0%9B%D1%83%D0%BA%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%B0%D1%80%D1%88%D1%80%D1%83%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F).
_bob_ не может прочитать пакеты _bob-airgap_.


File: nncp.info,  Node: UsecaseCensorRU,  Next: UsecaseSpyRU,  Prev: UsecaseAirgapRU,  Up: Сценарии

Обход сетевой цензуры, здоровье
-------------------------------

Это тоже подвид плохого канала связи.  Некоторые правительства склонны к
запрету *любого* вида личного (приватного) общения между людьми,
разрешая только доставку развлекательного контента и доступ к популярным
социальным сетям (которые уже вовсю наводнены рекламой, локально
исполняемым проприетарным
(https://www.gnu.org/philosophy/free-sw.ru.html) JavaScript кодом (для
слежкой за действиями пользователя, сбором данных), бесстыдно и
бессовестно эксплуатируя базовые потребности человека в общении).

   Это их естественное желание.  Но никто вас не заставляет насильно
подчиняться огромным корпорациям типа Apple, Google или Microsoft.  Ваш
выбор это создавать изолированные друг-к-другу сети с кучами безобидного
контента и приватными сообщениями.  Только хищники тихо наблюдают за
своими жертвами в мире млекопитающих – слежка и чувство что вы жертва,
сделавшая что-то плохое, вредит вашему здоровью.


File: nncp.info,  Node: UsecaseSpyRU,  Next: UsecaseCallerRU,  Prev: UsecaseCensorRU,  Up: Сценарии

Разведка, шпионаж, тайная агентура
----------------------------------

Эти ребята знают насколько небезопасен Интернет, несовместим с понятием
приватности.  Им необходим быстрый сброс и забор данных.  Нет
возможности провести несколько итераций приёмо-передач (round-trips) –
только сбросить данные, выстрелить и забыть.  Опять же, это может быть
переносной накопитель и/или USB тайник
(https://en.wikipedia.org/wiki/USB_dead_drop) (dead drop), PirateBox
(https://en.wikipedia.org/wiki/PirateBox)ы, связь малой дальности (SRAC)
(https://en.wikipedia.org/wiki/Short-range_agent_communications).
Короткоживущие сети малой дальности типа Bluetooth и WiFi могут быть и
довольно быстрыми, позволяя быстро "выстреливать" порциями исходящих
пакетов.

   Очень важное свойство – компрометация этих тайников или накопителей
не должна быть ни фатальна, ни даже опасна.  Пакеты посылаемые через
сети или обмениваемые через устройства – *note зашифрованы: Encrypted.
по принципу точка-точка (но, к сожалению, без совершенной прямой
секретности).  Никаких имён файлов, получателей почтовых сообщений не
видно.

   Общение узлов между собой происходит в, так называемой, *note спул:
Spool. области: директории содержащей только необработанные
зашифрованные пакеты.  После передачи пакета вы всё равно не сможете его
прочитать: необходимо запустить другую фазу: *note распаковку:
nncp-toss, которая использует ваши приватные криптографические ключи.
То есть, даже если вы потеряете свой компьютер, устройства хранения и
тому прочее – это не так плохо, потому что вы не носите с собой
приватные ключи (ведь так?), вы не "распаковываете" эти пакеты сразу же
на том же самом устройстве.  Распаковка (чтение этих зашифрованных
пакетов с извлечением переданных файлов и почтовых сообщений) может и
должна бы быть произведена на отдельном компьютере (*note nncp-cfgmin::
команда может помочь с созданием конфигурационного файла без приватных
ключей для этой цели).

   Если вы действительно хотите взять с собой приватные ключи, то *note
nncp-cfgenc:: команда способна зашифровать ваш конфигурационный файл.
Парольная фраза вами введённая усиливается функцией нагружающей и
центральный процессор и память.


File: nncp.info,  Node: UsecaseCallerRU,  Prev: UsecaseSpyRU,  Up: Сценарии

Дешёвая ночная связь
--------------------

Стоимость Интернет/телефонного трафика может варьироваться, в
зависимости от времени дня.  Ночные звонки/соединения могут быть дешевле
в два раза.  Вы хотите посылать ваши файлы в это время, но позволять
изредка проходить высокоприоритетной почте в любое время.  А также вы
хотите проходить любому трафику когда узел доступен через ЛВС (LAN).

   Вы легко можете настроить ваши предпочтения в *note настройках
звонков: Call. для *note nncp-caller:: команды, используемой при online
связи.

neigh: {
  [...]
  some-node: {
    [...]
    addrs: {
      lan: "[fe80::be5f:f4ff:fedd:2752%igb0]:5400"
      wan: "some-node.com:5400"
    }
    calls: [
      {
        cron: "*/1 * * * *"
        addr: lan
        nice: MAX
        onlinedeadline: 3600
      },
      {
        cron: "*/10 * * * *"
        addr: wan
        nice: PRIORITY
        xx: rx
      },
      {
        cron: "*/1 0-7 * * *"
        addr: wan
        nice: BULK
        onlinedeadline: 3600
        maxonlinetime: 3600
      },
    ]
  }
}


File: nncp.info,  Node: Новости,  Prev: Сценарии,  Up: Русский

Новости
=======

* Menu:

* Релиз 5.3.3::
* Релиз 5.3.2::
* Релиз 5.3.1::
* Релиз 5.3.0::
* Релиз 5.2.1::
* Релиз 5.2.0::
* Релиз 5.1.2::
* Релиз 5.1.1::
* Релиз 5.1.0::
* Релиз 5.0.0::
* Релиз 4.1::
* Релиз 4.0::
* Релиз 3.4::
* Релиз 3.3::
* Релиз 3.2::
* Релиз 3.1::
* Релиз 3.0::
* Релиз 2.0::
* Релиз 1.0::
* Релиз 0.12::
* Релиз 0.11::
* Релиз 0.10::
* Релиз 0.9::
* Релиз 0.8::
* Релиз 0.7::
* Релиз 0.6::
* Релиз 0.5::
* Релиз 0.4::
* Релиз 0.3::
* Релиз 0.2::


File: nncp.info,  Node: Релиз 5.3.3,  Next: Релиз 5.3.2,  Up: Новости

Релиз 5.3.3
-----------

   • Больше различных проверок в коде на ошибки.

   • Обновлены зависимые библиотеки.


File: nncp.info,  Node: Релиз 5.3.2,  Next: Релиз 5.3.1,  Prev: Релиз 5.3.3,  Up: Новости

Релиз 5.3.2
-----------

   • Исправлена некорректная логика ‘onlinedeadline’ timeout-а, при
     котором соединение могло не учитывать факты прихода пакетов и
     обрывать связь.


File: nncp.info,  Node: Релиз 5.3.1,  Next: Релиз 5.3.0,  Prev: Релиз 5.3.2,  Up: Новости

Релиз 5.3.1
-----------

   • Исправлена работоспособность ‘onlinedeadline’ с адресами вызова
     использующими внешние команды ("|somecmd").

   • ‘nncp-stat’ имеет опцию ‘-pkt’ показывающую информацию по каждому
     пакету в spool.


File: nncp.info,  Node: Релиз 5.3.0,  Next: Релиз 5.2.1,  Prev: Релиз 5.3.1,  Up: Новости

Релиз 5.3.0
-----------

   • Сообщения прогресса содержат префикс, поясняющий выполняемое
     действие.

   • Исправлено не происходящее дополнение (padding) handshake
     сообщений.

   • Завершать все порождаемые в SP протоколе горутины, меньше утечек
     памяти.

   • SP протокол порождает меньше вызовов записей (соответственно, и TCP
     пакетов) в сокет.

   • Проверять ‘onlinedeadline’ и ‘maxonlinetime’ ежесекундно,
     независимо от чтения из сокета (раз в 10 секунд в худшем случае).

   • Раз в минуту, если нет более никакого другого трафика, посылаются
     PING пакеты в SP-соединении.  Это позволит быстрее понимать что
     соединение более не работоспособно.

   • ‘nncp-toss’ использует lock-file для предотвращения одновременной
     обработки зашифрованных пакетов.


File: nncp.info,  Node: Релиз 5.2.1,  Next: Релиз 5.2.0,  Prev: Релиз 5.3.0,  Up: Новости

Релиз 5.2.1
-----------

   • Исправлена обработка ошибки SP протокола, иногда вызывающая панику
     программы.


File: nncp.info,  Node: Релиз 5.2.0,  Next: Релиз 5.1.2,  Prev: Релиз 5.2.1,  Up: Новости

Релиз 5.2.0
-----------

   • Большинство команд по умолчанию показывают однострочный прогресс
     выполнения операции.  Появились ‘-progress’, ‘-noprogress’ опции
     командной строки, ‘noprogress’ опция конфигурационного файла.

   • Исправлен некорректный код возврата ‘nncp-check’ команды, который
     возвращал ошибку когда всё хорошо.

   • Проверка свободного места для пакетов, во время выполнения
     ‘nncp-bundle -rx’.


File: nncp.info,  Node: Релиз 5.1.2,  Next: Релиз 5.1.1,  Prev: Релиз 5.2.0,  Up: Новости

Релиз 5.1.2
-----------

   • Исправлена *критичная* уязвимость: аутентификация online нод могла
     приводить к некорректной идентификации удалённой стороны, позволяя
     скачивать чужие зашифрованные пакеты.

   • Исправлена ошибка: в новосозданных конфигурационных файлах,
     приватный публичный ключ Noise были поменяны местами, что приводило
     к невозможности online аутентификации нод.

   • Явная синхронизация (fsync) директорий для гарантированного
     переименования файлов.


File: nncp.info,  Node: Релиз 5.1.1,  Next: Релиз 5.1.0,  Prev: Релиз 5.1.2,  Up: Новости

Релиз 5.1.1
-----------

   • Исправлена работоспособность ‘nncp-file’ с ‘-chunked 0’ опцией.


File: nncp.info,  Node: Релиз 5.1.0,  Next: Релиз 5.0.0,  Prev: Релиз 5.1.1,  Up: Новости

Релиз 5.1.0
-----------

   • ‘nncp-file’ может отправлять директории, автоматически на лету
     создавая pax архив.

   • Во время создания исходящих сообщений проверяется наличие
     свободного места на файловой системе.

   • ‘freq’, ‘freqminsize’, ‘freqchunked’ опции конфигурационного файла
     заменены на структуру ‘freq: {path: ..., minsize: ..., chunked:
     ...}’.

   • Добавлена ‘freq.maxsize’ опция конфигурационного файл, запрещающая
     ответ на файловый запрос больше заданного размера.

   • Возможность оповещения об успешно выполненных командах (exec) через
     ‘notify.exec’ опцию конфигурационного файла.


File: nncp.info,  Node: Релиз 5.0.0,  Next: Релиз 4.1,  Prev: Релиз 5.1.0,  Up: Новости

Релиз 5.0.0
-----------

   • *Несовместимое* изменение формата конфигурационного файла: YAML
     заменён на Hjson, из-за его гораздо большей простоты, без заметной
     потери функционала и удобства.

   • *Несовместимое* изменение формата простых пакетов.  Работа со
     старыми версиями не поддерживается.  ‘zlib’ сжатие заменено на
     ‘Zstandard’, так как оно значительно быстрее и эффективнее, не
     смотря на то, что версия библиотеки ещё не проверена временем.

   • Возможность соединяться с удалёнными нодами не только по TCP, но и
     через pipe вызов сторонней команды.

   • ‘nncp-cfgnew’ генерирует конфигурационный файл с множеством
     комментариев.  Можно использовать ‘-nocomments’ опцию для старого
     поведения.

   • Дубликаты имён файлов имеют суффикс ‘.CTR’, вместо ‘CTR’, чтобы
     избежать возможных коллизий с ‘.nncp.chunkCTR’.

   • Возможность переопределить umask процесса через опцию
     конфигурационного файла.

   • По умолчанию файлы и директории создаются с 666/777 правами
     доступа, позволяя управлять ими ‘umask’-ом.

   • Обновлены зависимости.

   • Полное использование go модулей для управления зависимостями
     (используется ‘go.cypherpunks.ru/nncp/v5’ namespace).

   • Отмена автоматического использования более новых версий GNU GPL
     (лицензия проекта GNU GPLv3-только).


File: nncp.info,  Node: Релиз 4.1,  Next: Релиз 4.0,  Prev: Релиз 5.0.0,  Up: Новости

Релиз 4.1
---------

   • Восстановлена работоспособность на GNU/Linux системах и Go версии
     1.10.


File: nncp.info,  Node: Релиз 4.0,  Next: Релиз 3.4,  Prev: Релиз 4.1,  Up: Новости

Релиз 4.0
---------

   • *Несовместимое* изменение формата зашифрованных и eblob пакетов:
     используется AEAD режим шифрования с 128 КиБ блоками, так как
     раньше ‘nncp-toss’ не проверял MAC зашифрованного пакета прежде чем
     отсылать дешифрованные данные внешней команде.  Старые версии не
     поддерживаются.

   • Проверка доступного места перед копированием во время работы
     ‘nncp-xfer’, ‘nncp-daemon’, ‘nncp-call(er)’.

   • ‘nncp-call’ имеет возможность только показывать список пакетов на
     удалённой машине, без их передачи.

   • ‘nncp-call’ имеет возможность передавать только чётко указанные
     пакеты.

   • Восстановлена работоспособность ‘xxrate’ настройки в ‘calls’ секции
     конфигурационного файла.

   • Зависимые библиотеки обновлены.

   • Небольшие исправления ошибок.

   • Начало использования ‘go.mod’ подсистемы.


File: nncp.info,  Node: Релиз 3.4,  Next: Релиз 3.3,  Prev: Релиз 4.0,  Up: Новости

Релиз 3.4
---------

   • ‘nncp-daemon’ может быть запущен как ‘inetd’-служба.


File: nncp.info,  Node: Релиз 3.3,  Next: Релиз 3.2,  Prev: Релиз 3.4,  Up: Новости

Релиз 3.3
---------

   • ‘nncp-daemon’, ‘nncp-call’, ‘nncp-caller’ проверяют существование
     ‘.seen’ файла и расценивают его как то, что файл уже был скачан.
     Возможно передача данных была осуществлена сторонним способом и
     удалённая сторона должна быть оповещена об этом.

   • Если более высокоприоритетный пакет попадает в спул, то
     ‘nncp-daemon’ добавит его в очередь отправки первым, прерывая
     низкоприоритетные передачи.

   • К средствам связанным с online-соединениями (‘nncp-daemon’,
     ‘nncp-call’, ‘nncp-caller’) добавлен простой ограничитель скорости.

   • Возможность задания приоритета символьными обозначениями: NORMAL,
     BULK+10, PRIORITY-5, итд.

   • Изменены значения приоритетов по-умолчанию: для ‘nncp-exec’ с 64 на
     96, для ‘nncp-freq’ с 64 на 160, для ‘nncp-file’ с 196 на 224.


File: nncp.info,  Node: Релиз 3.2,  Next: Релиз 3.1,  Prev: Релиз 3.3,  Up: Новости

Релиз 3.2
---------

   • *Несовместимое* изменение формата _bundle_ архивов и
     работоспособность ‘nncp-bundle’ команды с Go 1.10+.  Bundle должен
     быть корректным tar архивом, но Go 1.9 делал его недействительным
     из-за длинных путей внутри.  NNCP нечаянно был зависим от этой
     баги.  Явное добавление ‘NNCP/’ директории в архив восстанавливает
     работоспособность с корректными tar архивами.


File: nncp.info,  Node: Релиз 3.1,  Next: Релиз 3.0,  Prev: Релиз 3.2,  Up: Новости

Релиз 3.1
---------

   • Возможность отключать пересылку через промежуточные ноды используя
     -via - опцию командной строки.


File: nncp.info,  Node: Релиз 3.0,  Next: Релиз 2.0,  Prev: Релиз 3.1,  Up: Новости

Релиз 3.0
---------

   • *Несовместимое* изменение формата простых пакетов.  Работа со
     старыми версиями не поддерживается.

   • Добавлена возможность удалённого исполнения команд, путём
     конфигурирования ‘exec’ опции конфигурационного файла и
     использования команды ‘nncp-exec’:
        • Команда ‘nncp-mail’ заменена более гибкой и широкой
          ‘nncp-exec’.  Вместо вызова nncp-mail NODE RECIPIENT нужно
          использовать nncp-exec NODE sendmail RECIPIENT.
        • ‘sendmail’ опция конфигурационного файла заменена на более
          гибкую ‘exec’.  sendmail: [...] нужно заменить на exec:
              sendmail: [...].

   • Возможность переопределить ‘via’ опцию конфигурации для целевого
     узла через ‘-via’ опцию командной строки для следующих команд:
     ‘nncp-file’, ‘nncp-freq’, ‘nncp-exec’.

   • Chunked файлы, меньшего размера чем указанный chunk, отправляются
     просто в виде одного файла.

   • Exec команды вызываются с дополнительными переменными окружения
     ‘NNCP_NICE’ и ‘NNCP_SELF’.

   • Отправляемые файлы в ответ на запрос имеют приоритет указанный в
     запросе.  Указать их желаемый приоритет во время вызова ‘nncp-freq’
     можно аргументом ‘-replynice’.

   • Команде ‘nncp-toss’ можно сказать не обрабатывать определённые типы
     пакетов, за счёт опций ‘-nofile’, ‘-nofreq’, ‘-noexec’, ‘-notrns’.

   • По-умолчанию ‘nncp-file’ команда для ‘-minsize’/‘-chunked’ опций
     использует ‘FreqMinSize’/‘FreqChunked’ из конфигурационного файла.
     Это можно отключить указав нулевое значение.


File: nncp.info,  Node: Релиз 2.0,  Next: Релиз 1.0,  Prev: Релиз 3.0,  Up: Новости

Релиз 2.0
---------

   • *Несовместимое* изменение формата зашифрованных и eblob пакетов.
     Работа со старыми версиями не поддерживается.

   • Алгоритм шифрования Twofish заменён на ChaCha20.  Он намного
     быстрее.  Одним криптографическим примитивом меньше.

   • HKDF-BLAKE2b-256 KDF алгоритм заменён на BLAKE2Xb XOF. Ещё одним
     криптографическим примитивом меньше (предполагая, что BLAKE2X
     практически идентичен BLAKE2).


File: nncp.info,  Node: Релиз 1.0,  Next: Релиз 0.12,  Prev: Релиз 2.0,  Up: Новости

Релиз 1.0
---------

   • *Несовместимое* изменение формата зашифрованных пакетов.  Работа со
     старыми версиями не поддерживается.

   • ‘nncp-bundle’ команда может создавать потоки зашифрованных пакетов
     или потреблять их.  Это полезно когда речь идёт о stdin/stdout
     методах передачи (например запись на CD-ROM без создания
     промежуточного подготовленного ISO образа или работа с ленточными
     накопителями).

   • ‘nncp-toss’ команда может создавать ‘.seen’ файлы, предотвращая
     приём дублированных пакетов.

   • В команде ‘nncp-call’ разрешается иметь только одного обработчика
     контрольной суммы в фоне.  Это полезно когда тысячи маленьких
     входящих пакетов могут создать много горутин.

   • Возможность переопределить путь до spool директории и файла журнала
     через аргумент командной строки или переменную окружения.

   • ‘nncp-rm’ команда может удалять все исходящие/входящие, ‘.seen’,
     ‘.part’, ‘.lock’ и временные файлы.


File: nncp.info,  Node: Релиз 0.12,  Next: Релиз 0.11,  Prev: Релиз 1.0,  Up: Новости

Релиз 0.12
----------

   • Команда sendmail вызывается с ‘NNCP_SENDER’ переменной окружения.


File: nncp.info,  Node: Релиз 0.11,  Next: Релиз 0.10,  Prev: Релиз 0.12,  Up: Новости

Релиз 0.11
----------

   • Вывод команды ‘nncp-stat’ отсортирован по имени ноды.


File: nncp.info,  Node: Релиз 0.10,  Next: Релиз 0.9,  Prev: Релиз 0.11,  Up: Новости

Релиз 0.10
----------

   • ‘DST’ аргумент ‘nncp-freq’ команды теперь опционален.  По-умолчанию
     будет подставлен последний элемент ‘SRC’ пути.


File: nncp.info,  Node: Релиз 0.9,  Next: Релиз 0.8,  Prev: Релиз 0.10,  Up: Новости

Релиз 0.9
---------

   • Исправлена обработка ‘-rx’/‘-tx’ опций ‘nncp-call’ команды.  Они
     игнорировались.


File: nncp.info,  Node: Релиз 0.8,  Next: Релиз 0.7,  Prev: Релиз 0.9,  Up: Новости

Релиз 0.8
---------

   • Небольшое исправление ошибки в команде ‘nncp-file’, где опция
     ‘-minsize’ для передачи без разбиения на части была в байтах, а не
     KiB-ах.


File: nncp.info,  Node: Релиз 0.7,  Next: Релиз 0.6,  Prev: Релиз 0.8,  Up: Новости

Релиз 0.7
---------

   • Возможность предоставлять данные для ‘nncp-file’ через стандартный
     ввод, используя временный зашифрованный файл для этого.

   • Появилась возможность передачи файлов разбитых на части, с
     сопутствующей ‘nncp-reass’ командой и ‘freqchunked’ опцией
     конфигурационного файла.  Полезно для передачи больших файлов через
     маленькие устройства хранения.

   • ‘freqminsize’ опция конфигурационного файла, аналогичная
     ‘-minsize’.

   • Опция ‘-force’ команды ‘nncp-xfer’ переименована в ‘-mkdir’ для
     ясности.

   • Опция ‘-minsize’ задаётся в KiB, а не байтах, для удобства.

   • Команда ‘nncp-newcfg’ переименована в ‘nncp-cfgnew’, а
     ‘nncp-mincfg’ в ‘nncp-cfgmin’, для того чтобы они имели общий
     префикс и были сгруппированы для удобства.

   • Появилась команда ‘nncp-cfgenc’, позволяющая шифровать/дешифровать
     конфигурационный файл, чтобы безопасно его хранить без
     использования OpenPGP или других подобных инструментов.

   • Обновлены зависимые криптографические библиотеки.


File: nncp.info,  Node: Релиз 0.6,  Next: Релиз 0.5,  Prev: Релиз 0.7,  Up: Новости

Релиз 0.6
---------

   • Появилась небольшая команда ‘nncp-rm’.
   • Обновлены зависимые криптографические библиотеки.


File: nncp.info,  Node: Релиз 0.5,  Next: Релиз 0.4,  Prev: Релиз 0.6,  Up: Новости

Релиз 0.5
---------

   • Тривиальное небольшое исправление в значениях приоритетов
     по-умолчанию в ‘nncp-file’ и ‘nncp-freq’ командах.


File: nncp.info,  Node: Релиз 0.4,  Next: Релиз 0.3,  Prev: Релиз 0.5,  Up: Новости

Релиз 0.4
---------

   • Небольшое исправление в ‘nncp-call’, ‘nncp-caller’, ‘nncp-daemon’:
     иногда они могли падать с segmentation fault ошибкой (данные не
     терялись).

   • ‘nncp-newnode’ переименована в ‘nncp-newcfg’ – это короче и удобнее
     для использования.

   • Появилась команда ‘nncp-mincfg’: вспомогательная утилита
     позволяющая создать минималистичный урезанный конфигурационный файл
     без приватных ключей, что полезно во время использования
     ‘nncp-xfer’.


File: nncp.info,  Node: Релиз 0.3,  Next: Релиз 0.2,  Prev: Релиз 0.4,  Up: Новости

Релиз 0.3
---------

   • Исправлена совместимость с Go 1.6.


File: nncp.info,  Node: Релиз 0.2,  Prev: Релиз 0.3,  Up: Новости

Релиз 0.2
---------

   • *Несовместимое* изменение формата пакета (магическое число тоже
     изменено): поле размера пакета шифруется и не посылается в открытом
     виде.

   • ‘-minsize’ опция даёт возможность автоматически дополнять исходящие
     пакеты до указанного минимального размера.

   • ‘nncp-daemon’ и ‘nncp-call’/‘nncp-caller’ всегда в фоне проверяют
     появление исходящих _tx_ пакетов пока подключены.  Удалённая
     сторона сразу же оповещается об этом.

   • ‘-onlinedeadline’ опция даёт возможность выставления timeout-а на
     неактивность в online соединении, когда оно должно быть отключено.
     Она может быть использована для сохранения соединения на долгое
     время.

   • ‘-maxonlinetime’ опция даёт возможность указания максимального
     возможного времени жизни соединения.

   • Появилась ‘nncp-caller’ команда: клиент TCP-демона работающий по
     cron-у.

   • ‘nncp-pkt’ команда может разжимать данные.


File: nncp.info,  Node: Installation,  Next: Configuration,  Prev: Русский,  Up: Top

Installation
************

Possibly NNCP package already exists for your distribution:

   • FreeBSD ports (https://www.freshports.org/net/nncp/)
   • DragonFly BSD ports
     (https://github.com/DragonFlyBSD/DPorts/tree/master/net/nncp)
   • Void Linux
     (https://github.com/void-linux/void-packages/blob/master/srcpkgs/nncp/template)
   • Debian packages
     (https://qa.debian.org/developer.php?login=jgoerzen@complete.org)
     (pending inclusion, maintainer’s page)
   • NixOS packages (https://github.com/NixOS/nixpkgs/pull/75772)
     (pending inclusion, maintainer’s page)

   NNCP should run on any POSIX-compatible operating system.

   NNCP is written on Go (https://golang.org/) programming language and
you have to install Go compiler 1.10+ version.  ‘Make’ (BSD and GNU
versions are fine) is recommended for convenient building.  Texinfo
(https://www.gnu.org/software/texinfo/) is used for building
documentation (although tarballs already include it).

   In general you must get *note the tarball: Tarballs, check its *note
integrity and authenticity: Integrity. and run ‘make’.  Look for general
and platform-specific *note build instructions: Build-instructions.

* Menu:

* Prepared tarballs: Tarballs.
* Tarballs integrity check: Integrity.
* Build instructions: Build-instructions.
* Development source code: Sources.


File: nncp.info,  Node: Tarballs,  Next: Integrity,  Up: Installation

Prepared tarballs
=================

You can obtain releases source code prepared tarballs on
<http://www.nncpgo.org/>.


File: nncp.info,  Node: Integrity,  Next: Build-instructions,  Prev: Tarballs,  Up: Installation

Tarballs integrity check
========================

You *have to* check downloaded archives integrity and verify their
signature to be sure that you have got trusted, untampered software.
For integrity and authentication of downloaded binaries GNU Privacy
Guard (https://www.gnupg.org/) is used.  You must download signature
(‘.sig’) provided with the tarball.

   For the very first time you need to import signing public key.  It is
provided below, but it is better to check alternative resources with it.

pub   rsa2048/0x2B25868E75A1A953 2017-01-10
      92C2 F0AE FE73 208E 46BF  F3DE 2B25 868E 75A1 A953
uid   NNCP releases <releases at nncpgo dot org>

   •      $ gpg --auto-key-locate dane --locate-keys releases at nncpgo dot org
          $ gpg --auto-key-locate wkd --locate-keys releases at nncpgo dot org

   • -----BEGIN PGP PUBLIC KEY BLOCK-----
     
     mQENBFh0lv0BCADmquHdyjr1Mr8VHRNxzipHxmgbdK3CGJL1yzb1ntj7zbJl5UnQ
     71cxQ968pYPOBYqsA3oqtURAXzVL6qPGajHM+OXKB5OOjmt7vbd3xP5sBCWOjlrq
     S7yWx5ffuXf++tCGiXGkG7q+4zmXJUBuaot0fQ5ebBVLzVVIMv2C4hArZFZtK+YZ
     GkrIU+S49joe4qeUdCIQ1KpEB2m774QFxG05fMMys9L60wkL6ZgAy0GadkvCI5jD
     Xj5nRxa0fn+T/pcOWCpy7ka4rCR0rKCCNB8ARvpDnknTu2S9cxnWy1uOMv8JQpTb
     nY27vprdkH9aykdPl/7uHL/X1hutFxE8FOAjABEBAAG0I05OQ1AgcmVsZWFzZXMg
     PHJlbGVhc2VzQG5uY3Bnby5vcmc+iQFXBBMBCABBFiEEksLwrv5zII5Gv/PeKyWG
     jnWhqVMFAlh0lv0CGwMMCwoJDQgMBwsDBAECBxUKCQgLAwIFFgIBAwACHgECF4AA
     CgkQKyWGjnWhqVOaBggAqWywYtUddljHpiR/SK8uiYjSl8/F4QemM+tsu66GW56Y
     ZB7VFOxNFcpEfSnWwH61cJ5lCuRRgyjJcIOptzbKbO+nvYQEtXznjQYoJMLnPqAa
     2UPI5Seaijx8sXQWzYRq2Vzl9KUDBlhB2y4jZD4CFC1V29NRbWuPUajZn8UiZzFT
     IUR/gjvtYQozF0jN8Sevs+oGAN1tqK5kYo8YXEeL+3NCVUJkqFmBtFVxrxzty4cE
     ozgKpXzt9bi10a1hthKluWcZD6Zc4InqQhAGXb2JB2a5wRTs8CkJtHadwBOD3JEt
     HjfhBAoZMYmhOBeHt87AG5OjFNRIOJ2rRacnRDA3E4h1BBARCAAdFiEEz2Domlkj
     HnbiY2QirhqBCeSYV+8FAlh0lxYACgkQrhqBCeSYV+9i1QD/bdLAY67nf5giI/wQ
     i6K7v6PTPFwG6TtG6jj68Cy13RgA/iMuKw7niLwyPWRKzWcMIG1YhVyCNCgKQvFL
     vdr6yKbN
     =R8E0
     -----END PGP PUBLIC KEY BLOCK-----

   Then you could verify tarballs signature:

     $ gpg --verify nncp-5.3.3.tar.xz.sig nncp-5.3.3.tar.xz


File: nncp.info,  Node: Build-instructions,  Next: Sources,  Prev: Integrity,  Up: Installation

Build instructions
==================

Make sure that Go is installed.  For example to install it from
packages:

FreeBSD
     pkg install go
Debian, Ubuntu
     apt install golang

     $ [fetch|wget] http://www.nncpgo.org/download/nncp-5.3.3.tar.xz
     $ [fetch|wget] http://www.nncpgo.org/download/nncp-5.3.3.tar.xz.sig
     $ gpg --verify nncp-5.3.3.tar.xz.sig nncp-5.3.3.tar.xz
     $ xz --decompress --stdout nncp-5.3.3.tar.xz | tar xf -
     $ make -C nncp-5.3.3 all

   There is ‘install’ make-target respecting ‘DESTDIR’.  It will install
binaries and info-documentation:

     # make -C nncp-5.3.3 install PREFIX=/usr/local


File: nncp.info,  Node: Sources,  Prev: Build-instructions,  Up: Installation

Development source code
=======================

Development source code contains the latest version of the code.  It may
be buggy.  It does not contain compiled documentation and dependent
libraries source code.  Because of that, it is recommended for porters
to use *note tarballs: Tarballs. instead.

     $ git clone git://git.cypherpunks.ru/nncp.git
     $ cd nncp
     $ git checkout develop

   Also there is mirror of dependent libraries for safety if their
native repositories will be unavailable (they are seldom updated):

Software/library                     Mirror
--------------------------------------------------------------------------
‘github.com/davecgh/go-xdr’          <git://git.cypherpunks.ru/go-xdr.git>
‘github.com/dustin/go-humanize’      <git://git.cypherpunks.ru/go-humanize.git>
‘github.com/flynn/noise’             <git://git.cypherpunks.ru/noise.git>
‘github.com/google/go-cmp’           <git://git.cypherpunks.ru/go-cmp.git>
‘github.com/gorhill/cronexpr’        <git://git.cypherpunks.ru/cronexpr.git>
‘github.com/hjson/hjson-go’          <git://git.cypherpunks.ru/hjson-go.git>
‘github.com/klauspost/compress’      <git://git.cypherpunks.ru/compress.git>
‘golang.org/x/crypto’                <git://git.cypherpunks.ru/crypto.git>
‘golang.org/x/net’                   <git://git.cypherpunks.ru/net.git>
‘golang.org/x/sys’                   <git://git.cypherpunks.ru/sys.git>
‘gopkg.in/check.v1’                  <git://git.cypherpunks.ru/check.git>


File: nncp.info,  Node: Configuration,  Next: Call,  Prev: Installation,  Up: Top

Configuration file
******************

Example Hjson (https://hjson.org/) configuration file:

{
  spool: /var/spool/nncp
  log: /var/spool/nncp/log
  umask: "022"
  noprogress: true

  notify: {
    file: {
      from: nncp@localhost
      to: user+file@example.com
    }
    freq: {
      from: nncp@localhost
      to: user+freq@example.com
    }
    exec: {
      "*.warcer": {
        from: nncp@localhost
        to: user+warcer@example.com
      }
      "eve.warcer": {
        from: nncp@localhost
        to: user+warcer-overriden@example.com
      }
    }
  }

  self: {
    id: TIJQL...2NGIA
    exchpub: CYVGQ...PSEWQ
    exchprv: 65PUY...MPZ3Q
    signpub: 2NMVC...CMH5Q
    signprv: 555JD...RGD6Y
    noiseprv: D62XU...NKYPA
    noisepub: KIBKK...ESM7Q
  }

  neigh: {
    self: {
      id: TIJQL...2NGIA
      exchpub: CYVGQ...PSEWQ
      signpub: 2NMVC...CMH5Q
      noisepub: KIBKK...ESM7Q
      exec: {sendmail: ["/usr/sbin/sendmail"]}
    }
    alice: {
      id: "XJZBK...65IJQ"
      exchpub: MJACJ...FAI6A
      signpub: T4AFC...N2FRQ
      noisepub: UBM5K...VI42A
      exec: {flag: ["/usr/bin/touch", "-t"]}
      incoming: "/home/alice/incoming"
      onlinedeadline: 1800
      maxonlinetime: 3600
      addrs: {
        lan: "[fe80::1234%igb0]:5400"
        internet: alice.com:3389
        proxied: "|ssh remote.host nncp-daemon -inetd"
      }
      calls: [
        {
          cron: "*/2 * * * *"
        },
      ]
    }
    bob: {
      id: 2IZNP...UYGYA
      exchpub: WFLMZ...B7NHA
      signpub: GTGXG...IE3OA
      exec: {
        sendmail: ["/usr/sbin/sendmail"]
        warcer: ["/path/to/warcer.sh"]
        wgeter: ["/path/to/wgeter.sh"]
      }
      freq: {
        path: "/home/bob/pub"
        chunked: 1024
        minsize: 2048
      }
      via: ["alice"]
      rxrate: 10
      txrate: 20
    }
  }
}

   *spool* field contains an absolute path to *note spool: Spool.
directory.  *log* field contains an absolute path to *note log: Log.
file.

   Non-empty optional *umask* will force all invoked commands to
override their umask to specified octal mask.  Useful for using with
*note shared spool directories: Shared spool.

   Enabled *noprogress* option disabled progress showing for many
commands by default.  You can always force its showing with ‘-progress’
command line option anyway.

   *notify* section contains notification settings for successfully
tossed file, freq and exec packets.  Corresponding *from* and *to*
fields will be substituted in notification email message.
‘neigh.self.exec.sendmail’ will be used as a local mailer.  You can omit
either of those two ‘from’/‘to’ sections to omit corresponding
notifications, or the whole section at once.

   ‘notify.exec’ section is a mapping of exec handles and corresponding
‘from’/‘to’ sections.  Each handle has either ‘NODE.HANDLE’ or
‘*.HANDLE’ syntax.  You can override notification options for some node
with the first type of name.  Handle command’s output will be included
in notification messages.

   *self* section contains our node’s private keypairs.  *exch** and
*sign** are used during *note encrypted: Encrypted. packet creation.
*noise** are used during *note synchronization protocol: Sync. working
in *note nncp-call::/*note nncp-daemon::.

   *neigh* section contains all known neighbours information.  It always
has *self* neighbour that is copy of our node’s public data (public
keys).  It is useful for copy-paste sharing with your friends.  Each
section’s key is a human-readable name of the neighbour.

   Except for ‘id’, ‘exchpub’ and ‘signpub’ each neighbour node has the
following fields:

*noisepub*
     If present, then node can be online called using *note
     synchronization protocol: Sync.  Contains authentication public
     key.

*exec*
     Dictionary consisting of handles and corresponding command line
     arguments.  In example above there are ‘sendmail’ handles,
     ‘warcer’, ‘wgeter’ and ‘flag’ one.  Remote node can queue some
     handle execution with providing additional command line arguments
     and the body fed to command’s stdin.

     sendmail: ["/usr/sbin/sendmail", "-t"] handle, when called by
     echo hello world | nncp-exec OURNODE sendmail ARG0 ARG1 ARG2
     command, will execute:

          NNCP_SELF=OURNODE \
          NNCP_SENDER=REMOTE \
          NNCP_NICE=64 \
          /usr/sbin/sendmail -t ARG0 ARG1 ARG2

     feeding hello world\n to that started ‘sendmail’ process.

*incoming*
     Full path to directory where all file uploads will be saved.  May
     be omitted to forbid file uploading on that node.

*freq.path*
     Full path to directory from where file requests will queue files
     for transmission.  May be omitted to forbid freqing from that node.

*freq.chunked*
     If set, then enable *note chunked: Chunked. file transmission
     during freqing.  This is the desired chunk size in KiBs.

*freq.minsize*
     If set, then apply *note -minsize: OptMinSize. option during file
     transmission.

*via*
     An array of node identifiers that will be used as a relay to that
     node.  For example ["foo","bar"] means that packet can reach
     current node by transitioning through ‘foo’ and then ‘bar’ nodes.
     May be omitted if direct connection exists and no relaying is
     required.

*addrs*
     Dictionary containing known network addresses of the node.  Each
     key is human-readable name of the address.  For direct TCP
     connections use host:port format, pointing to *note nncp-daemon::’s
     listening instance.  Also you can pipe connection through the
     external command using |some command format.  ‘/bin/sh -c "some
     command"’ will start and its stdin/stdout used as a connection.
     May be omitted if either no direct connection exists, or *note
     nncp-call:: is used with forced address specifying.

*rxrate/txrate*
     If greater than zero, then at most *rate packets per second will be
     sent/received after the handshake.  It could be used as crude
     bandwidth traffic shaper: each packet has at most 64 KiB payload
     size.  Could be omitted at all – no rate limits.

*onlinedeadline*
     Online connection deadline of node inactivity in seconds.  It is
     the time connection considered dead after not receiving/sending any
     packets and node must disconnect.  By default it is set to 10
     seconds – that means disconnecting after 10 seconds when no packets
     received and transmitted.  This can be set to rather high values to
     keep connection alive (to reduce handshake overhead and delays),
     wait for appearing packets ready to send and notifying remote side
     about their appearance.

*maxonlinetime*
     If greater than zero, then it is maximal amount of time connect
     could be alive.  Forcefully disconnect if it is exceeded.

*calls*
     List of *note call configuration: Call.s.  Can be omitted if *note
     nncp-caller:: won’t be used to call that node.

* Menu:

* Shared spool directory: Shared spool.


File: nncp.info,  Node: Shared spool,  Up: Configuration

Shared spool directory
======================

If you want to share single spool directory with multiple grouped Unix
users, then you can ‘setgid’ it and assure that umask is group friendly.
For convenience you can set ‘umask’ globally for invoked NNCP commands
in the configuration file.  For example:

     $ chgrp nncp /usr/local/etc/nncp.hjson /var/spool/nncp
     $ chmod g+r /usr/local/etc/nncp.hjson
     $ chmod g+rwxs /var/spool/nncp
     $ echo 'umask: "007"' >> /usr/local/etc/nncp.hjson


File: nncp.info,  Node: Call,  Next: Integration,  Prev: Configuration,  Up: Top

Call configuration
******************

Call is a rule when and how node can be called.

   Example list of call structures:

calls: [
    {
        cron: "*/1 * * * MON-FRI"
        onlinedeadline: 3600
        nice: PRIORITY+10
    },
    {
        cron: "30 * * * SAT,SUN"
        onlinedeadline: 1800
        maxonlinetime: 1750
        nice: NORMAL
        rxrate: 10
        txrate: 20
    },
    {
        cron: "0 * * * SAT,SUN"
        xx: rx
        addr: lan
    },
]

   tells that on work days of the week call that node every minute,
disconnect after an hour of inactivity and process only relatively high
priority packets (presumably mail ones).  So we connect and hold
connection for very long time to pass only emails.  On weekends call
that node only each half-hour for processing high-priority packets.
Also only on weekends try to connect to that node every hour only using
LAN address and only receiving any (any priority) packets (assume that
low priority huge file transmission are done additionally via offline
connections).

   It contains the following fields (only _cron_ is required):

_cron_
     This is copy-pasted documentation from
     ‘github.com/gorhill/cronexpr’ library used there.

     Field name     Mandatory?Allowed      Allowed special characters
                            values         
     ---------------------------------------------------------------------------
     Seconds        No      0-59           * / , -
     Minutes        Yes     0-59           * / , -
     Hours          Yes     0-23           * / , -
     Day of month   Yes     1-31           * / , - L W
     Month          Yes     1-12 or        * / , -
                            JAN-DEC
     Day of week    Yes     0-6 or         * / , - L #
                            SUN-SAT
     Year           No      1970–2099      * / , -
                                           

     Asterisk (*)

          The asterisk indicates that the cron expression matches for
          all values of the field.  E.g., using an asterisk in the 4th
          field (month) indicates every month.

     Slash (/)

          Slashes describe increments of ranges.  For example 3-59/15 in
          the minute field indicate the third minute of the hour and
          every 15 minutes thereafter.  The form */... is equivalent to
          the form "first-last/...", that is, an increment over the
          largest possible range of the field.

     Comma (,)

          Commas are used to separate items of a list.  For example,
          using MON,WED,FRI in the 5th field (day of week) means
          Mondays, Wednesdays and Fridays.

     Hyphen (-)

          Hyphens define ranges.  For example, 2000-2010 indicates every
          year between 2000 and 2010 AD, inclusive.

     L

          L stands for "last".  When used in the day-of-week field, it
          allows you to specify constructs such as "the last Friday"
          (5L) of a given month.  In the day-of-month field, it
          specifies the last day of the month.

     W

          The W character is allowed for the day-of-month field.  This
          character is used to specify the business day (Monday-Friday)
          nearest the given day.  As an example, if you were to specify
          15W as the value for the day-of-month field, the meaning is:
          "the nearest business day to the 15th of the month."

          So, if the 15th is a Saturday, the trigger fires on Friday the
          14th.  If the 15th is a Sunday, the trigger fires on Monday
          the 16th.  If the 15th is a Tuesday, then it fires on Tuesday
          the 15th.  However if you specify 1W as the value for
          day-of-month, and the 1st is a Saturday, the trigger fires on
          Monday the 3rd, as it does not ’jump’ over the boundary of a
          month’s days.

          The W character can be specified only when the day-of-month is
          a single day, not a range or list of days.

          The W character can also be combined with L, i.e.  LW to mean
          "the last business day of the month."

     Hash (#)

          # is allowed for the day-of-week field, and must be followed
          by a number between one and five.  It allows you to specify
          constructs such as "the second Friday" of a given month.

     Predefined cron expressions:

     Entry   Description                                            Equivalent
                                                                    to
     ---------------------------------------------------------------------------
     @annuallyRun once a year at midnight in the morning of         0 0 0 1 1 * *
             January 1
     @yearly Run once a year at midnight in the morning of          0 0 0 1 1 * *
             January 1
     @monthlyRun once a month at midnight in the morning of the     0 0 0 1 * * *
             first of the month
     @weekly Run once a week at midnight in the morning of Sunday   0 0 0 * * 0 *
     @daily  Run once a day at midnight                             0 0 0 * * * *
     @hourly Run once an hour at the beginning of the hour          0 0 * * * * *

        • If only six fields are present, a 0 second field is prepended,
          that is, * * * * * 2013 internally become 0 * * * * * 2013.
        • If only five fields are present, a 0 second field is prepended
          and a wildcard year field is appended, that is, * * * * Mon
          internally become 0 * * * * Mon *.
        • Domain for day-of-week field is [0-7] instead of [0-6], 7
          being Sunday (like 0).  This to comply with
          <https://linux.die.net/man/5/crontab>.

_nice_
     Optional.  Use that *note niceness: Niceness. during the call (255
     is used otherwise).

_xx_
     Optional.  Either rx or tx.  Tells only to either to receive or to
     transmit data during that call.

_addr_
     Optional.  Call only that address, instead of trying all from *note
     _addrs_: CfgAddrs. configuration option.  It can be either key from
     _addrs_ dictionary, or an ordinary ‘addr:port’.

_rxrate/txrate_
     Optional.  Override *note _rxrate/txrate_: CfgXxRate. configuration
     option when calling.

_onlinedeadline_
     Optional.  Override *note _onlinedeadline_: CfgOnlineDeadline.
     configuration option when calling.

_maxonlinetime_
     Optional.  Override *note _maxonlinetime_: CfgMaxOnlineTime.
     configuration option when calling.


File: nncp.info,  Node: Integration,  Next: Commands,  Prev: Call,  Up: Top

Integration with existing software
**********************************

Here is some examples of how you can solve popular tasks with NNCP,
making them store-and-forward friendly.

* Menu:

* Index files for freqing: FreqIndex.
* Postfix::
* Web feeds: Feeds.
* Web pages: WARCs.
* BitTorrent and huge files: BitTorrent.
* Downloading service: DownloadService.
* Git::
* Multimedia streaming: Multimedia.


File: nncp.info,  Node: FreqIndex,  Next: Postfix,  Up: Integration

Index files for freqing
=======================

In many cases you do not know exact files list on remote machine you
want to freq from.  Because files can be updated there.  It is useful to
run cron-ed job on it to create files listing you can freq and search
for files in it:

     0  4  *  *  *  cd /storage ; tmp=`mktemp` ; \
         tree -f -h -N --du --timefmt \%Y-\%m-\%d |
         zstdmt -19 > $tmp && chmod 644 $tmp && mv $tmp TREE.txt.zst ; \
         tree -J -f --timefmt \%Y-\%m-\%d |
         zstdmt -19 > $tmp && chmod 644 $tmp && mv $tmp TREE.json.zst


File: nncp.info,  Node: Postfix,  Next: Feeds,  Prev: FreqIndex,  Up: Integration

Integration with Postfix
========================

This section is taken from Postfix and UUCP
(http://www.postfix.org/UUCP_README.html) manual and just replaces
UUCP-related calls with NNCP ones.

   *Setting up a Postfix Internet to NNCP gateway*

   Here is how to set up a machine that sits on the Internet and that
forwards mail to a LAN that is connected via NNCP.

   • You need an *note nncp-exec:: program that extracts the sender
     address from mail that arrives via NNCP, and that feeds the mail
     into the Postfix ‘sendmail’ command.

   • Define a ‘pipe(8)’ based mail delivery transport for delivery via
     NNCP:
          /usr/local/etc/postfix/master.cf:
          nncp      unix  -       n       n       -       -       pipe
                    flags=F user=nncp argv=nncp-exec -quiet $nexthop sendmail $recipient

     This runs the ‘nncp-exec’ command to place outgoing mail into the
     NNCP queue after replacing $NEXTHOP by the the receiving NNCP node
     and after replacing $RECIPIENT by the recipients.  The ‘pipe(8)’
     delivery agent executes the ‘nncp-exec’ command without assistance
     from the shell, so there are no problems with shell meta characters
     in command-line parameters.

   • Specify that mail for _example.com_, should be delivered via NNCP,
     to a host named _nncp-host_:

          /usr/local/etc/postfix/transport:
              example.com     nncp:nncp-host
              .example.com    nncp:nncp-host

     See the ‘transport(5)’ manual page for more details.

   • Execute the command ‘postmap /etc/postfix/transport’ whenever you
     change the ‘transport’ file.

   • Enable ‘transport’ table lookups:

          /usr/local/etc/postfix/main.cf:
              transport_maps = hash:$config_directory/transport

   • Add _example.com_ to the list of domains that your site is willing
     to relay mail for.

          /usr/local/etc/postfix/main.cf:
              relay_domains = example.com ...other relay domains...

     See the ‘relay_domains’ configuration parameter description for
     details.

   • Execute the command ‘postfix reload’ to make the changes effective.

   *Setting up a Postfix LAN to NNCP gateway*

   Here is how to relay mail from a LAN via NNCP to the Internet.

   • You need an *note nncp-exec:: program that extracts the sender
     address from mail that arrives via NNCP, and that feeds the mail
     into the Postfix ‘sendmail’ command.

   • Specify that all remote mail must be sent via the ‘nncp’ mail
     transport to your NNCP gateway host, say, _nncp-gateway_:

          /usr/local/etc/postfix/main.cf:
              relayhost = nncp-gateway
              default_transport = nncp

     Postfix 2.0 and later also allows the following more succinct form:

          /usr/local/etc/postfix/main.cf:
              default_transport = nncp:nncp-gateway

   • Define a ‘pipe(8)’ based message delivery transport for mail
     delivery via NNCP:

          /usr/local/etc/postfix/master.cf:
          nncp      unix  -       n       n       -       -       pipe
                    flags=F user=nncp argv=nncp-exec -quiet $nexthop sendmail $recipient

     This runs the ‘nncp-exec’ command to place outgoing mail into the
     NNCP queue.  It substitutes the hostname (_nncp-gateway_, or
     whatever you specified) and the recipients before execution of the
     command.  The ‘nncp-exec’ command is executed without assistance
     from the shell, so there are no problems with shell meta
     characters.

   • Execute the command ‘postfix reload’ to make the changes effective.


File: nncp.info,  Node: Feeds,  Next: WARCs,  Prev: Postfix,  Up: Integration

Integration with Web feeds
==========================

RSS and Atom feeds could be collected using rss2email
(https://github.com/wking/rss2email) program.  It converts all incoming
feed entries to email messages.  Read about how to integration *note
Postfix:: with email.  ‘rss2email’ could be run in a cron, to collect
feeds without any user interaction.  Also this program supports ETags
and won’t pollute the channel if remote server supports them too.

   After installing ‘rss2email’, create configuration file:

     $ r2e new rss-robot@address.com

   and add feeds you want to retrieve:

     $ r2e add https://git.cypherpunks.ru/cgit.cgi/nncp.git/atom/?h=master

   and run the process:

     $ r2e run


File: nncp.info,  Node: WARCs,  Next: BitTorrent,  Prev: Feeds,  Up: Integration

Integration with Web pages
==========================

Simple HTML web page can be downloaded very easily for sending and
viewing it offline after:

     $ wget http://www.example.com/page.html

   But most web pages contain links to images, CSS and JavaScript files,
required for complete rendering.  GNU Wget
(https://www.gnu.org/software/wget/) supports that documents parsing and
understanding page dependencies.  You can download the whole page with
dependencies the following way:

     $ wget \
         --page-requisites \
         --convert-links \
         --adjust-extension \
         --restrict-file-names=ascii \
         --span-hosts \
         --random-wait \
         --execute robots=off \
         http://www.example.com/page.html

   that will create ‘www.example.com’ directory with all files necessary
to view ‘page.html’ web page.  You can create single file compressed
tarball with that directory and send it to remote node:

     $ tar cf - www.example.com | zstd |
         nncp-file - remote.node:www.example.com-page.tar.zst

   But there are multi-paged articles, there are the whole interesting
sites you want to get in a single package.  You can mirror the whole web
site by utilizing ‘wget’’s recursive feature:

     $ wget \
         --recursive \
         --timestamping \
         -l inf \
         --no-remove-listing \
         --no-parent \
         [...]
         http://www.example.com/

   There is a standard for creating Web ARChives
(https://en.wikipedia.org/wiki/Web_ARChive): *WARC*. Fortunately again,
‘wget’ supports it as an output format.

     $ wget \
         --warc-file www.example_com-$(date '+%Y%M%d%H%m%S') \
         --no-warc-compression \
         --no-warc-keep-log \
         [...]
         http://www.example.com/

   That command will create uncompressed ‘www.example_com-XXX.warc’ web
archive.  By default, WARCs are compressed using gzip
(https://en.wikipedia.org/wiki/Gzip), but, in example above, we have
disabled it to compress with stronger and faster zstd
(https://en.wikipedia.org/wiki/Zstd), before sending via ‘nncp-file’.

   There are plenty of software acting like HTTP proxy for your browser,
allowing to view that WARC files.  However you can extract files from
that archive using warcat (https://pypi.python.org/pypi/Warcat) utility,
producing usual directory hierarchy:

     $ python3 -m warcat extract \
         www.example_com-XXX.warc \
         --output-dir www.example.com-XXX \
         --progress


File: nncp.info,  Node: BitTorrent,  Next: DownloadService,  Prev: WARCs,  Up: Integration

BitTorrent and huge files
=========================

If dealing with *note Git::, *note web feeds: Feeds. and *note
multimedia: Multimedia. goes relatively fast, then BitTorrent and huge
files consumes much time.  You can not wait for downloads finish, but
want to queue them after.

   aria2 (http://aria2.github.io/) multi-protocol download utility could
be used for solving that issue conveniently.  It supports HTTP, HTTPS,
FTP, SFTP and BitTorrent protocols, together with Metalink
(http://tools.ietf.org/html/rfc5854) format.  BitTorrent support is
fully-featured: UDP trackers, DHT, PEX, encryption, magnet URIs,
Web-seeding, selective downloads, LPD. ‘aria2’ can accelerate HTTP*/*FTP
downloads by segmented multiple parallel connections.

   You can queue you files after they are completely downloaded.
‘aria2-downloaded.sh’ contents:

#!/bin/sh

TORRENTS_DIR=/storage/torrents
REMOTE=stargrave.org

if [ "$2" -eq 0 ]; then
    # downloaded .torrent/.metalink
    exit 0
fi

if [ "$2" -gt 1 ]; then
    cd "$3"
    while [ "$(pwd)" != $TORRENTS_DIR ]; do
        name="$(basename "$(pwd)")"
        cd ..
    done
    tartmp=$(mktemp ./finished.XXXXXX)
    tar cf $tartmp "$name"
    nncp-file $tartmp $REMOTE:"$name".tar
    rm $tartmp
else
    nncp-file "$3" $REMOTE:
fi

   Also you can prepare input file
(http://aria2.github.io/manual/en/html/aria2c.html#files) with the jobs
you want to download:

     $ cat jobs
     http://www.nncpgo.org/download/nncp-0.11.tar.xz
         out=nncp.txz
     http://www.nncpgo.org/download/nncp-0.11.tar.xz.sig
         out=nncp.txz.sig
     $ aria2c \
         --on-download-complete aria2-downloaded.sh \
         --input-file jobs

   and all that downloaded (‘nncp.txz’, ‘nncp.txz.sig’) files will be
sent to ‘remote.node’ when finished.


File: nncp.info,  Node: DownloadService,  Next: Git,  Prev: BitTorrent,  Up: Integration

Downloading service
===================

Previous sections tell about manual downloading and sending results to
remote node.  But one wish to remotely initiate downloading.  That can
be easily solved with *note exec: CfgExec. handles.

exec: {
  warcer: ["/bin/sh", "/path/to/warcer.sh"]
  wgeter: ["/bin/sh", "/path/to/wgeter.sh"]
  aria2c: [
    "/usr/local/bin/aria2c",
    "--on-download-complete", "aria2-downloaded.sh",
    "--on-bt-download-complete", "aria2-downloaded.sh"
  ]
}

   ‘warcer.sh’ contents:

#!/bin/sh -ex

name="$1"-$(date '+%Y%M%d%H%m%S')
read cmdline

tmp=$(mktemp -d)
cd $tmp
wget \
    --page-requisites \
    --convert-links \
    --adjust-extension \
    --restrict-file-names=ascii \
    --span-hosts \
    --random-wait \
    --execute robots=off \
    --reject '*.woff*,*.ttf,*.eot,*.js' \
    --tries 10 \
    --warc-file "$name" \
    --no-warc-compression \
    --no-warc-keep-log \
    $cmdline || :
zstd --rm "$name".warc
nncp-file -nice $NNCP_NICE "$name".warc.zst $NNCP_SENDER:
rm -r $tmp

   ‘wgeter.sh’ contents:

#!/bin/sh -ex

name=$1-$(date '+%Y%M%d%H%m%S')
read cmdline

tmp=$(mktemp)
wget --output-document=$tmp $cmdline
zstd --rm $tmp
nncp-file -nice $NNCP_NICE $tmp.zst $NNCP_SENDER:$name.zst
rm $tmp.zst

   Now you can queue that node to send you some website’s page, file or
BitTorrents:

     $ echo http://www.nncpgo.org/Postfix.html |
         nncp-exec remote.node warcer postfix-whole-page
     $ echo http://www.nncpgo.org/Postfix.html |
         nncp-exec remote.node wgeter postfix-html-page
     $ echo \
         http://www.nncpgo.org/download/nncp-0.11.tar.xz
         http://www.nncpgo.org/download/nncp-0.11.tar.xz.sig |
         nncp-exec remote.node aria2c


File: nncp.info,  Node: Git,  Next: Multimedia,  Prev: DownloadService,  Up: Integration

Integration with Git
====================

Git (https://git-scm.com/) version control system already has all
necessary tools for store-and-forward networking.  git-bundle
(https://git-scm.com/docs/git-bundle) command is everything you need.

   Use it to create bundles containing all required blobs/trees/commits
and tags:

     $ git bundle create repo-initial.bundle master --tags --branches
     $ git tag -f last-bundle
     $ nncp-file repo-initial.bundle remote.node:repo-$(date % '+%Y%M%d%H%m%S').bundle

   Do usual working with the Git: commit, add, branch, checkout, etc.
When you decide to queue your changes for sending, create diff-ed bundle
and transfer them:

     $ git bundle create repo-$(date '+%Y%M%d%H%m%S').bundle last-bundle..master
     or maybe
     $ git bundle create repo-$(date '+%Y%M%d').bundle --since=10.days master

   Received bundle on remote machine acts like usual remote:

     $ git clone -b master repo-XXX.bundle

   overwrite ‘repo.bundle’ file with newer bundles you retrieve and
fetch all required branches and commits:

     $ git pull # assuming that origin remote points to repo.bundle
     $ git fetch repo.bundle master:localRef
     $ git ls-remote repo.bundle

   Bundles are also useful when cloning huge repositories (like Linux
has).  Git’s native protocol does not support any kind of interrupted
download resuming, so you will start from the beginning if connection is
lost.  Bundles, being an ordinary files, can be downloaded with native
HTTP/FTP/NNCP resuming capabilities.  After you fetch repository via the
bundle, you can add an ordinary ‘git://’ remote and fetch the
difference.

   Also you can find the following exec-handler useful:

#!/bin/sh -ex

tmp=$(mktemp)

cleanup()
{
    rm -f $tmp
}
trap cleanup HUP PIPE INT QUIT TERM EXIT

read revs
cd $HOME/git/$1.git
git bundle create $tmp $revs
nncp-file -nice $NNCP_NICE $tmp $NNCP_SENDER:$1-$(date '+%Y%M%d%H%m%S').bundle

   And it allows you to request for bundles like that: ‘echo
some-old-commit..master | nncp-exec REMOTE bundler REPONAME’.


File: nncp.info,  Node: Multimedia,  Prev: Git,  Up: Integration

Integration with multimedia streaming
=====================================

Many video and audio streams could be downloaded using youtube-dl
(http://yt-dl.org/) program.  Look
(https://rg3.github.io/youtube-dl/supportedsites.html) how many of them
are supported, including _Dailymotion_, _Vimeo_ and _YouTube_.

   When you multimedia becomes an ordinary file, you can transfer it
easily.

     $ youtube-dl \
         --exec 'nncp-file {} remote.node:' \
         'https://www.youtube.com/watch?list=PLd2Cw8x5CytxPAEBwzilrhQUHt_UN10FJ'


File: nncp.info,  Node: Commands,  Next: Niceness,  Prev: Integration,  Up: Top

Commands
********

Nearly all commands have the following common options:

‘-cfg’
     Path to configuration file.  May be overridden by ‘NNCPCFG’
     environment variable.  If file file is an encrypted *note eblob:
     EBlob, then ask for passphrase to decrypt it first.
‘-debug’
     Print debug messages.  Normally this option should not be used.
‘-minsize’
     Minimal required resulting packet size, in KiBs.  For example if
     you send 2 KiB file and set ‘-minsize 4’, then resulting packet
     will be 4 KiB (containing file itself and some junk).
‘-nice’
     Set desired outgoing packet *note niceness level: Niceness.
‘-replynice’
     Set desired reply packet *note niceness level: Niceness.  Only freq
     and exec packets look at that niceness level.
‘-via’
     Override *note via: CfgVia. configuration option for destination
     node.  Specified nodes must be separated with comma: NODE1,NODE2.
     With -via - you can disable relaying at all.
‘-spool’
     Override path to spool directory.  May be specified by ‘NNCPSPOOL’
     environment variable.
‘-log’
     Override path to logfile.  May be specified by ‘NNCPLOG’
     environment variable.
‘-quiet’
     Print only errors, omit simple informational messages.  In any case
     those messages are logged, so you can reread them using *note
     nncp-log:: command.
‘-progress, -noprogress’
     Either force progress showing, or disable it.
‘-version’
     Print version information.
‘-warranty’
     Print warranty information (no warranty).

* Menu:

* nncp-bundle::
* nncp-call::
* nncp-caller::
* nncp-cfgenc::
* nncp-cfgmin::
* nncp-cfgnew::
* nncp-check::
* nncp-daemon::
* nncp-exec::
* nncp-file::
* nncp-freq::
* nncp-log::
* nncp-pkt::
* nncp-reass::
* nncp-rm::
* nncp-stat::
* nncp-toss::
* nncp-xfer::


File: nncp.info,  Node: nncp-bundle,  Next: nncp-call,  Up: Commands

nncp-bundle
===========

     $ nncp-bundle [options] -tx [-delete] NODE [NODE ...] > ...
     $ nncp-bundle [options] -rx -delete [-dryrun] [NODE ...] < ...
     $ nncp-bundle [options] -rx [-check] [-dryrun] [NODE ...] < ...

   With ‘-tx’ option, this command creates *note bundle: Bundles. of
*note encrypted packets: Encrypted. from the spool directory and writes
it to stdout.

   With ‘-rx’ option, this command takes bundle from stdin and copies
all found packets for our node to the spool directory.  Pay attention
that *no* integrity checking is done by default.  Modern tape drives
could easily provide too much throughput your CPU won’t be able to
verify on the fly.  So if you won’t *note toss: nncp-toss. received
packets at the place, it is advisable either to run *note nncp-check::
utility for packets integrity verification, or to use ‘-check’ option to
enable on the fly integrity check.

   You can specify multiple ‘NODE’ arguments, telling for what nodes you
want to create the stream, or take it from.  If no nodes are specified
for ‘-rx’ mode, then all packets aimed at us will be processed.

   When packets are sent through the stream, they are still kept in the
spool directory, because there is no assurance that they are transferred
to the media (media (CD-ROM, tape drive, raw hard drive) can end).  If
you want to forcefully delete them (after they are successfully flushed
to stdout) anyway, use ‘-delete’ option.

   But you can verify produced stream after, by digesting it by yourself
with ‘-rx’ and ‘-delete’ options – in that mode, stream packets
integrity will be checked and they will be deleted from the spool if
everything is good.  So it is advisable to recheck your streams:

     $ nncp-bundle -tx ALICE BOB WHATEVER | cdrecord -tao -
     $ dd if=/dev/cd0 bs=2048 | nncp-bundle -rx -delete

   ‘-dryrun’ option prevents any writes to the spool.  This is useful
when you need to see what packets will pass by and possibly check their
integrity.


File: nncp.info,  Node: nncp-call,  Next: nncp-caller,  Prev: nncp-bundle,  Up: Commands

nncp-call
=========

     $ nncp-call [options]
         [-onlinedeadline INT]
         [-maxonlinetime INT]
         [-rx|-tx]
         [-list]
         [-pkts PKT,PKT,...]
         [-rxrate INT]
         [-txrate INT]
         NODE[:ADDR] [FORCEADDR]

   Call (connect to) specified ‘NODE’ and run *note synchronization:
Sync. protocol with the *note daemon: nncp-daemon. on the remote side.
Normally this command could be run any time you wish to either check for
incoming packets, or to send out queued ones.  Synchronization protocol
allows resuming and bidirectional packets transfer.

   If ‘-rx’ option is specified then only inbound packets transmission
is performed.  If ‘-tx’ option is specified, then only outbound
transmission is performed.  ‘-onlinedeadline’ overrides *note
_onlinedeadline_: CfgOnlineDeadline.  ‘-maxonlinetime’ overrides *note
_maxonlinetime_: CfgMaxOnlineTime.  ‘-rxrate’/‘-txrate’ override *note
rxrate/txrate: CfgXxRate.  ‘-list’ option allows you to list packets of
remote node, without any transmission.

   You can specify what packets your want to download, by specifying
‘-pkts’ option with comma-separated list of packets identifiers.

   Each ‘NODE’ can contain several uniquely identified ‘ADDR’esses in
*note configuration: CfgAddrs. file.  If you do not specify the exact
one, then all will be tried until the first success.  Optionally you can
force ‘FORCEADDR’ address usage, instead of addresses taken from
configuration file.  You can specify both host:port and |some command
formats.

   Pay attention that this command runs integrity check for each
completely received packet in the background.  This can be time
consuming.  Connection could be lost during that check and remote node
won’t be notified that file is done.  But after successful integrity
check that file is renamed from ‘.part’ one and when you rerun
‘nncp-call’ again, remote node will receive completion notification.


File: nncp.info,  Node: nncp-caller,  Next: nncp-cfgenc,  Prev: nncp-call,  Up: Commands

nncp-caller
===========

     $ nncp-caller [options] [NODE ...]

   Croned daemon that calls remote nodes from time to time, according to
their *note _calls_: CfgCalls. configuration field.

   Optional number of ‘NODE’s tells to ignore other ones.  Otherwise all
nodes with specified _calls_ configuration field will be called.

   Look *note nncp-call:: for more information.


File: nncp.info,  Node: nncp-cfgenc,  Next: nncp-cfgmin,  Prev: nncp-caller,  Up: Commands

nncp-cfgenc
===========

     $ nncp-cfgmin [options] [-s INT] [-t INT] [-p INT] cfg.hjson > cfg.hjson.eblob
     $ nncp-cfgmin [options] -d cfg.hjson.eblob > cfg.hjson

   This command allows you to encrypt provided ‘cfg.hjson’ file with the
passphrase, producing *note eblob: EBlob, to safely keep your
configuration file with private keys.  This utility was written for
users who do not want (or can not) to use either GnuPG
(https://gnupg.org/) or similar tools.  That ‘eblob’ file can be used
directly in ‘-cfg’ option of nearly all commands.

   ‘-s’, ‘-t’, ‘-p’ are used to tune ‘eblob’’s password strengthening
function.  Space memory cost (‘-s’), specified in number of BLAKE2b-256
blocks (32 bytes), tells how many memory must be used for hashing –
bigger values are better, but slower.  Time cost (‘-t’) tells how many
rounds/iterations must be performed – bigger is better, but slower.
Number of parallel jobs (‘-p’) tells how many computation processes will
be run: this is the same as running that number of independent hashers
and then joining their result together.

   When invoked for encryption, passphrase is entered manually twice.
When invoked for decryption (‘-d’ option), it is asked once and exits if
passphrase can not decrypt ‘eblob’.

   ‘-dump’ options parses ‘eblob’ and prints parameters used during its
creation.  For example:
     $ nncp-cfgenc -dump /usr/local/etc/nncp.hjson.eblob
     Strengthening function: Balloon with BLAKE2b-256
     Memory space cost: 1048576 bytes
     Number of rounds: 16
     Number of parallel jobs: 2
     Blob size: 2494


File: nncp.info,  Node: nncp-cfgmin,  Next: nncp-cfgnew,  Prev: nncp-cfgenc,  Up: Commands

nncp-cfgmin
===========

     $ nncp-cfgmin [options] > stripped.hjson

   Print out stripped configuration version: only path to *note spool:
Spool, path to log file, neighbours public keys are stayed.  This is
useful mainly for usage with *note nncp-xfer:: that has to know only
neighbours, without private keys involving.


File: nncp.info,  Node: nncp-cfgnew,  Next: nncp-check,  Prev: nncp-cfgmin,  Up: Commands

nncp-cfgnew
===========

     $ nncp-cfgnew [options] [-nocomments] > new.hjson

   Generate new node configuration: private keys, example configuration
file and print it to stdout.  You must use this command when you setup
the new node.  ‘-nocomments’ will create configuration file without
descriptive huge comments – useful for advanced users.

   Pay attention that private keys generation consumes an entropy from
your operating system.


File: nncp.info,  Node: nncp-check,  Next: nncp-daemon,  Prev: nncp-cfgnew,  Up: Commands

nncp-check
==========

     $ nncp-check [options]

   Perform *note spool: Spool. directory integrity check.  Read all
files that has Base32-encoded filenames and compare it with recalculated
BLAKE2b hash output of their contents.  That supplementary command is
not used often in practice, if ever.


File: nncp.info,  Node: nncp-daemon,  Next: nncp-exec,  Prev: nncp-check,  Up: Commands

nncp-daemon
===========

     $ nncp-daemon [options] [-maxconn INT] [-bind ADDR] [-inetd]

   Start listening TCP daemon, wait for incoming connections and run
*note synchronization protocol: Sync. with each of them.  You can run
*note nncp-toss:: utility in background to process inbound packets from
time to time.

   ‘-maxconn’ option specifies how many simultaneous clients daemon can
handle.  ‘-bind’ option specifies ‘addr:port’ it must bind to and
listen.

   It could be run as ‘inetd’ service, by specifying ‘-inetd’ option.
Pay attention that because it uses stdin/stdout, it can not effectively
work with IO timeouts and connection closing can propagate up to 5
minutes in practice.  Example inetd-entry:

uucp	stream	tcp6	nowait	nncpuser	/usr/local/bin/nncp-daemon	nncp-daemon -quiet -inetd


File: nncp.info,  Node: nncp-exec,  Next: nncp-file,  Prev: nncp-daemon,  Up: Commands

nncp-exec
=========

     $ nncp-exec [options] NODE HANDLE [ARG0 ARG1 ...]

   Send execution command to ‘NODE’ for specified ‘HANDLE’.  Body is
read from stdin and compressed.  After receiving, remote side will
execute specified *note handle: CfgExec. command with ‘ARG*’ appended
and decompressed body fed to command’s stdin.

   For example, if remote side has following configuration file for your
node:

exec: {
  sendmail: [/usr/sbin/sendmail, "-t"]
  appender: ["/bin/sh", "-c", "cat >> /append"]
}

   then executing echo My message | nncp-exec -replynice 123 REMOTE
sendmail root@localhost will lead to execution of:

     echo My message |
         NNCP_SELF=REMOTE \
         NNCP_SENDER=OurNodeId \
         NNCP_NICE=123 \
         /usr/sbin/sendmail -t root@localhost

   If *note notification: CfgNotify. is enabled on the remote side for
exec handles, then it will sent simple letter after successful command
execution with its output in message body.


File: nncp.info,  Node: nncp-file,  Next: nncp-freq,  Prev: nncp-exec,  Up: Commands

nncp-file
=========

     $ nncp-file [options] [-chunked INT] SRC NODE:[DST]

   Send ‘SRC’ file to remote ‘NODE’.  ‘DST’ specifies destination file
name in remote’s *note incoming: CfgIncoming. directory.  If this file
already exists there, then counter will be appended to it.

   This command queues file in *note spool: Spool. directory immediately
(through the temporary file of course) – so pay attention that sending 2
GiB file will create 2 GiB outbound encrypted packet.

   If ‘SRC’ equals to ‘-’, then create an encrypted temporary file and
copy everything taken from stdin to it and use for outbound packet
creation.  Pay attention that if you want to send 1 GiB of data taken
from stdin, then you have to have more than 2 GiB of disk space for that
temporary file and resulting encrypted packet.  You can control where
temporary file will be stored using ‘TMPDIR’ environment variable.
Encryption is performed in AEAD mode with ChaCha20
(https://cr.yp.to/chacha.html)-Poly1305
(https://en.wikipedia.org/wiki/Poly1305) algorithms.  Data is splitted
on 128 KiB blocks.  Each block is encrypted with increasing nonce
counter.

   If ‘SRC’ points to directory, then pax archive
(https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_01)
will be created on the fly with directory contents and destination
filename ‘.tar’ appended.  It *won’t* contain any entities
metainformation, but modification time with the names.  UID/GID are set
to zero.  Directories have 777 permissions, files have 666, for being
friendly with ‘umask’.  Also each entity will have comment like
Autogenerated by NNCP version X.Y.Z built with goXXX.

   If ‘-chunked’ is specified, then source file will be split *note on
chunks: Chunked.  ‘INT’ is the desired chunk size in KiBs.  This mode is
more CPU hungry.  Pay attention that chunk is saved in spool directory
immediately and it is not deleted if any error occurs.  ‘-minsize’
option is applied per each chunk.  Do not forget about *note possible:
ChunkedZFS. ZFS deduplication issues.  Zero ‘-chunked’ disables chunked
transmission.

   If *note notification: CfgNotify. is enabled on the remote side for
file transmissions, then it will sent simple letter after successful
file receiving.


File: nncp.info,  Node: nncp-freq,  Next: nncp-log,  Prev: nncp-file,  Up: Commands

nncp-freq
=========

     $ nncp-freq [options] NODE:SRC [DST]

   Send file request to ‘NODE’, asking it to send its ‘SRC’ file from
*note freq.path: CfgFreq. directory to our node under ‘DST’ filename in
our *note incoming: CfgIncoming. one.  If ‘DST’ is not specified, then
last element of ‘SRC’ will be used.

   If *note notification: CfgNotify. is enabled on the remote side for
file request, then it will sent simple letter after successful file
queuing.


File: nncp.info,  Node: nncp-log,  Next: nncp-pkt,  Prev: nncp-freq,  Up: Commands

nncp-log
========

     $ nncp-log [options]

   Parse *note log: Log. file and print out its records in
human-readable form.


File: nncp.info,  Node: nncp-pkt,  Next: nncp-reass,  Prev: nncp-log,  Up: Commands

nncp-pkt
========

     $ nncp-pkt [options] < pkt
     $ nncp-pkt [options] [-decompress] -dump < pkt > payload
     $ nncp-pkt -overheads

   Low level packet parser.  Normally it should not be used, but can
help in debugging.

   By default it will print packet’s type, for example:
     Packet type: encrypted
     Niceness: 64
     Sender: 2WHBV3TPZHDOZGUJEH563ZEK7M33J4UESRFO4PDKWD5KZNPROABQ

   If you specify ‘-dump’ option and provide an *note encrypted:
Encrypted. packet, then it will verify and decrypt it to stdout.
Encrypted packets contain *note plain: Plain. ones, that also can be fed
to ‘nncp-pkt’:

     Packet type: plain
     Payload type: transitional
     Path: VHMTRWDOXPLK7BR55ICZ5N32ZJUMRKZEMFNGGCEAXV66GG43PEBQ

     Packet type: plain
     Payload type: mail
     Path: stargrave@stargrave.org

   And with the ‘-dump’ option it will give you the actual payload (the
whole file, mail message, and so on).  ‘-decompress’ option tries to
zstd-decompress the data from plain packet (useful for mail packets).

   ‘-overheads’ options print encrypted, plain and size header
overheads.


File: nncp.info,  Node: nncp-reass,  Next: nncp-rm,  Prev: nncp-pkt,  Up: Commands

nncp-reass
==========

     $ nncp-reass [options] [-dryrun] [-keep] [-dump] [-stdout] FILE.nncp.meta
     $ nncp-reass [options] [-dryrun] [-keep] {-all | -node NODE}

   Reassemble *note chunked file: Chunked. after *note tossing:
nncp-toss.

   When called with ‘FILE’ option, this command will reassemble only it.
When called with ‘-node’ option, this command will try to reassemble all
‘.nncp.meta’ files found in ‘NODE’’s *note incoming: CfgIncoming.
directory.  When called with ‘-all’ option, then cycle through all known
nodes to do the same.

   Reassembling process does the following:

  1. Parses *note ‘.nncp.meta’: Chunked. file.
  2. Checks existence and size of every ‘.nncp.chunkXXX’.
  3. Verifies integrity of every chunk.
  4. Concatenates all chunks, simultaneously removing them from
     filesystem.

   That process reads the whole data twice.  Be sure to have free disk
space for at least one chunk.  Decrypted chunk files as a rule are saved
in pseudo-random order, so removing them during reassembly process will
likely lead to filesystem fragmentation.  Reassembly process on
filesystems with deduplication capability should be rather lightweight.

   If ‘-dryrun’ option is specified, then only existence and integrity
checking are performed.

   If ‘-keep’ option is specified, then no ‘.nncp.meta’/‘.nncp.chunkXXX’
files are deleted during reassembly process.

   ‘-stdout’ option outputs reassembled file to stdout, instead of
saving to temporary file with renaming after.  This could be useful for
reassembling on separate filesystem to lower fragmentation effect,
and/or separate storage device for higher performance.

   ‘-dump’ option prints meta-file contents in human-friendly form.  It
is useful mainly for debugging purposes.  For example:
     Original filename: testfile
     File size: 3.8 MiB (3987795 bytes)
     Chunk size: 1.0 MiB (1048576 bytes)
     Number of chunks: 4
     Checksums:
         0: eac60d819edf40b8ecdacd0b9a5a8c62de2d15eef3c8ca719eafa0be9b894017
         1: 013a07e659f2e353d0e4339c3375c96c7fffaa2fa00875635f440bbc4631052a
         2: f4f883975a663f2252328707a30e71b2678f933b2f3103db8475b03293e4316e
         3: 0e9e229501bf0ca42d4aa07393d19406d40b179f3922a3986ef12b41019b45a3

   Do not forget about *note possible: ChunkedZFS. ZFS deduplication
issues.


File: nncp.info,  Node: nncp-rm,  Next: nncp-stat,  Prev: nncp-reass,  Up: Commands

nncp-rm
=======

     $ nncp-rm [options] -tmp
     $ nncp-rm [options] -lock
     $ nncp-rm [options] -node NODE -part
     $ nncp-rm [options] -node NODE -seen
     $ nncp-rm [options] -node NODE [-rx] [-tx]
     $ nncp-rm [options] -node NODE -pkt PKT

   This command is aimed to delete various files from your spool
directory:

   • If ‘-tmp’ option is specified, then it will delete all temporary
     files in ‘spool/tmp’ directory.  Files may stay in it when commands
     like *note nncp-file:: fail for some reason.
   • If ‘-lock’ option is specified, then all ‘.lock’ files will be
     deleted in your spool directory.
   • If ‘-pkt’ option is specified, then ‘PKT’ packet (its Base32 name)
     will be deleted.  This is useful when you see some packet failing
     to be processed.
   • When either ‘-rx’ or ‘-tx’ options are specified (maybe both of
     them), then delete all packets from that given queues.  If ‘-part’
     is given, then delete only ‘.part’ly downloaded ones.  If ‘-seen’
     option is specified, then delete only ‘.seen’ files.


File: nncp.info,  Node: nncp-stat,  Next: nncp-toss,  Prev: nncp-rm,  Up: Commands

nncp-stat
=========

     $ nncp-stat [options] [-pkt] [-node NODE]

   Print current *note spool: Spool. statistics about unsent and
unprocessed packets.  For each node (unless ‘-node’ specified) and each
niceness level there will be printed how many packets (with the total
size) are in inbound (Rx) and outbound (Tx) queues.  ‘-pkt’ option show
information about each packet.


File: nncp.info,  Node: nncp-toss,  Next: nncp-xfer,  Prev: nncp-stat,  Up: Commands

nncp-toss
=========

     $ nncp-toss [options]
         [-node NODE]
         [-dryrun]
         [-cycle INT]
         [-seen]
         [-nofile]
         [-nofreq]
         [-noexec]
         [-notrns]

   Perform "tossing" operation on all inbound packets.  This is the tool
that decrypts all packets and processes all payload packets in them:
copies files, sends mails, sends out file requests and relays transition
packets.  It should be run after each online/offline exchange.

   ‘-dryrun’ option does not perform any writing and sending, just tells
what it will do.

   ‘-cycle’ option tells not to quit, but to repeat tossing every ‘INT’
seconds in an infinite loop.  That can be useful when running this
command as a daemon.

   ‘-seen’ option creates empty ‘XXX.seen’ file after successful tossing
of ‘XXX’ packet.  *note nncp-xfer::, *note nncp-bundle::, *note
nncp-daemon:: and *note nncp-call:: commands skip inbound packets that
has been already seen, processed and tossed.  This is helpful to prevent
duplicates.

   ‘-nofile’, ‘-nofreq’, ‘-noexec’, ‘-notrns’ options allow to disable
any kind of packet types processing.


File: nncp.info,  Node: nncp-xfer,  Prev: nncp-toss,  Up: Commands

nncp-xfer
=========

     $ nncp-xfer [options] [-node NODE] [-mkdir] [-keep] [-rx|-tx] DIR

   Search for directory in ‘DIR’ containing inbound packets for us and
move them to local *note spool: Spool. directory.  Also search for known
neighbours directories and move locally queued outbound packets to them.
This command is used for offline packets transmission.

   If ‘-mkdir’ option is specified, then outbound neighbour(s)
directories will be created.  This is useful for the first time usage,
when storage device does not have any directories tree.

   If ‘-keep’ option is specified, then keep copied files, do not remove
them.

   ‘-rx’ option tells only to move inbound packets addressed to us.
‘-tx’ option tells exactly the opposite: move only outbound packets.

   *note nncp-cfgmin:: could be useful for creating stripped
minimalistic configuration file version without any private keys.

   ‘DIR’ directory has the following structure:
‘RECIPIENT/SENDER/PACKET’, where ‘RECIPIENT’ is Base32 encoded
destination node, ‘SENDER’ is Base32 encoded sender node.

   Also look for *note nncp-bundle::, especially if you deal with CD-ROM
and tape drives.


File: nncp.info,  Node: Niceness,  Next: Chunked,  Prev: Commands,  Up: Top

Niceness
********

Each transmitted packet has niceness level, as Unix has ‘nice’ command
for controlling processes priority.  Higher nicer level means that
packet is "nicer" and allows other to bypass him – that means lower
transmission precedence.

   Send big files with higher nice level!  That will guarantee you that
higher priority packets, like mail messages, will pass first, even when
lower priority packet was already been partially downloaded.

   There are default niceness levels built-in for *note nncp-exec::,
*note nncp-file:: and *note nncp-freq:: commands.  But pay attention
that it can give information about underlying payload to the adversary!

   There are 1-255 niceness levels.  They could be specified either as
integer, or using aliases with delta modifiers:

_FLASH (F)_
     Urgent priority.
_PRIORITY (P)_
     High priority.  Command execution/mail use that priority by
     default.
_NORMAL (N)_
     Normal priority.  File requests use that priority by default.
_BULK (B)_
     Bundles shipped on a "least effort" basis.  File transmission use
     that priority by default.

 1: F-31   65: P-31  129: N-31  193: B-31
 2: F-30   66: P-30  130: N-30  194: B-30
    ...        ...        ...        ...
32: F      96: P     160: N     224: B
33: F+1    97: P+1   161: N+1   225: B+1
34: F+2    98: P+2   162: N+2   226: B+2
    ...        ...        ...        ...
64: F+32  128: P+32  192: N+32  255: B+31 | MAX

   Precedence could be specified both with single-letter aliases and
with whole strings.  They are case insensitive.  _MAX_ is an alias for
255 niceness level.


File: nncp.info,  Node: Chunked,  Next: Bundles,  Prev: Niceness,  Up: Top

Chunked files
*************

There is ability to transfer huge files with splitting them into smaller
chunks.  Each chunk is treated like a separate file, producing separate
outbound packet unrelated with other ones.

   This is useful when your removable storage device has smaller
capacity than huge file’s size.  You can transfer those chunks on
different storage devices, and/or at different time, reassembling the
whole packet on the destination node.

   Splitting is done with *note nncp-file -chunked: nncp-file. command
and reassembling with *note nncp-reass:: command.

   Chunked ‘FILE’ produces ‘FILE.nncp.meta’, ‘FILE.nncp.chunk0’,
‘FILE.nncp.chunk1’, ...  files.  All ‘.nncp.chunkXXX’ can be
concatenated together to produce original ‘FILE’.

   ‘.nncp.meta’ contains information about file/chunk size and their
hash checksums.  This is XDR
(https://tools.ietf.org/html/rfc4506)-encoded structure:

+------------------------------+---------------------+
| MAGIC | FILESIZE | CHUNKSIZE | HASH0 | HASH1 | ... |
+------------------------------+---------------------+

               XDR type               Value
---------------------------------------------------------------------------
Magic number   8-byte, fixed length   N N C P M 0x00 0x00 0x01
               opaque data
File size      unsigned hyper         Whole reassembled file’s size
               integer
Chunk size     unsigned hyper         Size of each chunk (except for the
               integer                last one, that could be smaller)
Checksums      variable length        BLAKE2b-256 checksum of each chunk
               array of 32 byte
               fixed length opaque
               data

   It is strongly advisable to reassemble incoming chunked files on ZFS
(https://en.wikipedia.org/wiki/ZFS) dataset with deduplication feature
enabled.  It could be more CPU and memory hungry, but will save your
disk’s IO and free space from pollution (although temporary).  But pay
attention that you chunks must be either equal to, or divisible by
dataset’s ‘recordsize’ value for deduplication workability.  Default
ZFS’s ‘recordsize’ is 128 KiBs, so it is advisable to chunk your files
on 128, 256, 384, 512, etc KiB blocks.


File: nncp.info,  Node: Bundles,  Next: Spool,  Prev: Chunked,  Up: Top

Bundles
*******

Usual *note nncp-xfer:: command requires filesystem it can operate on.
That presumes random access media storage usage, like hard drives, USB
flash drives and similar.  But media like CD-ROM and especially tape
drives are sequential by nature.  You can prepare intermediate directory
for recording to CD-ROM disc/tape, but that requires additional storage
and is inconvenient.

   Bundles, created with *note nncp-bundle:: command are convenient
alternative to ordinary ‘nncp-xfer’.  Bundle is just a collection of
*note encrypted packets: Encrypted, stream of packets.  It could be
sequentially streamed for recording and digested back.

   • They do not require intermediate storage before recording on either
     CD-ROM or tape drive.
          $ nncp-bundle -tx SOMENODE | cdrecord -tao -         # record directly to CD
          $ nncp-bundle -tx SOMENODE | dd of=/dev/sa0 bs=10240 # record directly to tape

          $ dd if=/dev/cd0 bs=2048 | nncp-bundle -rx  # read directly from CD
          $ dd if=/dev/sa0 bs=10240 | nncp-bundle -rx # read directly from tape

   • They do not require filesystem existence to deal with, simplifying
     administration when operating in heterogeneous systems with varying
     filesystems.  No ‘mount’/‘umount’, ‘zpool import’/‘zpool export’
     and struggling with file permissions.
          $ nncp-bundle -tx SOMENODE | dd of=/dev/da0 bs=1M # record directly to
                                                            # hard/flash drive
          $ dd if=/dev/da0 bs=1M | nncp-bundle -rx # read directly from drive

   • This is the fastest way to record outbound packets for offline
     transmission – sequential write is always faster, when no
     metainformation needs to be updated.

   • This is convenient to use with append-only storages, just
     sending/appending new bundles.

   • Bundles could be repeatedly broadcasted in one-way transmission.
     *note Sync protocol: Sync. requires interactive connection, but
     bundles can contain mix of various recipients.

   Technically bundle is valid POSIX.1-2001 pax archive
(https://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_01)
with directory/files hierarchy identical to that is used in *note
nncp-xfer::: ‘NNCP/RECIPIENT/SENDER/PACKET’.  So bundle can also be
created by manual tar-ing of ‘nncp-xfer’ resulting directory.


File: nncp.info,  Node: Spool,  Next: Log,  Prev: Bundles,  Up: Top

Spool directory
***************

Spool directory holds *note encrypted packets: Encrypted. received from
remote nodes and queued for sending to them.  It has the following
example structure:

     spool/tmp/
     spool/2WHB...OABQ/rx.lock
     spool/2WHB...OABQ/rx/5ZIB...UMKW.part
     spool/2WHB...OABQ/tx.lock
     spool/2WHB...OABQ/toss.lock
     spool/BYRR...CG6Q/rx.lock
     spool/BYRR...CG6Q/rx/
     spool/BYRR...CG6Q/tx.lock
     spool/BYRR...CG6Q/tx/AQUT...DGNT.seen
     spool/BYRR...CG6Q/tx/NSYY...ZUU6
     spool/BYRR...CG6Q/tx/VCSR...3VXX.seen
     spool/BYRR...CG6Q/tx/ZI5U...5RRQ

   Except for ‘tmp’, all other directories are Base32-encoded node
identifiers (‘2WHB...OABQ’, ‘BYRR...CG6Q’ in our example).  Each node
subdirectory has ‘rx’ (received, partially received and currently
unprocessed packets) and ‘tx’ (for outbound packets) directories.

   Each ‘rx’/‘tx’ directory contains one file per encrypted packet.  Its
filename is Base32 encoded BLAKE2b hash of the contents.  So it can be
integrity checked at any time.  ‘5ZIB...UMKW.part’ is partially received
file from ‘2WHB...OABQ’ node.  ‘tx’ directory can not contain partially
written files – they are moved atomically from ‘tmp’.

   When *note nncp-toss:: utility is called with ‘-seen’ option, it will
create empty ‘XXX.seen’ files, telling that some kind of packet was
already tossed sometime.

   Only one process can work with ‘rx’/‘tx’ directories at once, so
there are corresponding lock files.


File: nncp.info,  Node: Log,  Next: Packet,  Prev: Spool,  Up: Top

Log format
**********

Log is a plaintext file with single log entry per line.  Lines are "\n"
separated.  It is not intended to be read by human – use *note
nncp-log:: utility.

   Each line has the following format:

LEVEL | DATETIME | SD | MSG

   Example log records:

I 2017-01-09T08:41:54.751732131Z [nncp-xfer node="VHMTRWDOXPLK7BR55ICZ5N32ZJUMRKZEMFNGGCEAXV66GG43PEBQ" pkt="KMG6FO5UNEK7HWVFJPWQYC7MOZ76KEZ4FWCGM62PWA2QE5755NPA" size="4162548" xx="tx"]
I 2017-01-09T08:42:18.990005394Z [sp-infos node="BYRRQUULEHINPKEFN7CHMSHR5I5CK7PMX5HQNCYERTBAR4BOCG6Q" pkts="0" size="0" xx="tx"]
I 2017-01-09T08:48:59.264847401Z [call-finish duration="10" node="BYRRQUULEHINPKEFN7CHMSHR5I5CK7PMX5HQNCYERTBAR4BOCG6Q" rxbytes="60" rxspeed="60" txbytes="108" txspeed="108"]

_|_
     Space character.
_LEVEL_
     Is single character log level.  As a rule is is either I
     (informational message), or E (error message).
_DATETIME_
     UTC datetime in RFC 3339 2006-01-02T15:04:05.999999999Z format.
_SD_
     Structured data as in RFC 5424.
_MSG_
     Arbitrary UTF-8 encoded text data.


File: nncp.info,  Node: Packet,  Next: Sync,  Prev: Log,  Up: Top

Packet format
*************

All packets are XDR (https://tools.ietf.org/html/rfc4506)-encoded
structures.

* Menu:

* Plain packet: Plain.
* Encrypted packet: Encrypted.


File: nncp.info,  Node: Plain,  Next: Encrypted,  Up: Packet

Plain packet
============

Plain packet contains either the whole file, or file request (freq), or
transition packet or exec message.  It is called "plain", because it
contains plaintext, but plain packets would never be stored on your hard
drive.

            HEADER
+--------------------------------------+--...---+
| MAGIC | TYPE | NICE | PATHLEN | PATH | PAYLOAD|
+--------------------------------------+--...---+

               XDR type               Value
---------------------------------------------------------------------------
Magic number   8-byte, fixed length   N N C P P 0x00 0x00 0x03
               opaque data
Payload type   unsigned integer       0 (file), 1 (freq), 2 (exec), 3
                                      (transition)
Niceness       unsigned integer       1-255, preferred packet
                                      *note niceness: Niceness. level
Path length    unsigned integer       actual length of _path_ field’s
                                      payload
Path           255 byte, fixed           • UTF-8 encoded destination
               length opaque data          path for file transfer
                                         • UTF-8 encoded source path for
                                           file request
                                         • UTF-8 encoded, zero byte
                                           separated, exec’s arguments
                                         • Node’s id the transition
                                           packet must be relayed on

   Path has fixed size because of hiding its actual length – it is
valuable metadata.  Payload is appended to the header – it is not stored
as XDR field, because most XDR libraries will store all that data in the
memory.

   Depending on the packet’s type, payload could store:

   • File contents
   • Destination path for freq
   • Zstandard (https://facebook.github.io/zstd/) compressed exec body
   • Whole encrypted packet we need to relay on

   Also depending on packet’s type, niceness level means:

   • Preferable niceness level for files sent by freq
   • ‘NNCP_NICE’ variable’s value passed during *note CfgExec::
     invocation.


File: nncp.info,  Node: Encrypted,  Prev: Plain,  Up: Packet

Encrypted packet
================

Encrypted packets are the only files found in spools, in exchangeable
storages and that are synchronized between TCP daemons.

   Each encrypted packet has the following header:

  +------------ HEADER --------------------+   +------------- ENCRYPTED -------------+
 /                                          \ /                                       \
+--------------------------------------------+------+---------+----------...---+------+
| MAGIC | NICE | SENDER | RCPT | EPUB | SIGN | SIZE | BLOCK 0 | BLOCK 1  ...   | JUNK |
+-------------------------------------/------\------+---------+----------...---+------+
                                     /        \
                      +-------------------------------------+
                      | MAGIC | NICE | SENDER | RCPT | EPUB |
                      +-------------------------------------+

               XDR type               Value
---------------------------------------------------------------------------
Magic number   8-byte, fixed length   N N C P E 0x00 0x00 0x04
               opaque data
Niceness       unsigned integer       1-255, packet
                                      *note niceness: Niceness. level
Sender         32-byte, fixed         Sender node’s id
               length opaque data
Recipient      32-byte, fixed         Recipient node’s id
               length opaque data
Exchange       32-byte, fixed         Ephemeral curve25519 public key
public key     length opaque data
Signature      64-byte, fixed         ed25519 signature for that
               length opaque data     packet’s header

   Signature is calculated over all previous fields.

   All following encryption is done in AEAD mode using ChaCha20
(https://cr.yp.to/chacha.html)-Poly1305
(https://en.wikipedia.org/wiki/Poly1305) algorithms.  Data is splitted
on 128 KiB blocks.  Each block is encrypted with increasing nonce
counter.

   Authenticated and encrypted size come after the header:

               XDR type               Value
---------------------------------------------------------------------------
Size           unsigned hyper         Payload size.
               integer

   Then comes the actual payload.

   Each node has static *exchange* and *signature* keypairs.  When node
A want to send encrypted packet to node B, it:

  1. generates ephemeral curve25519 (http://cr.yp.to/ecdh.html) keypair
  2. prepares structure for signing
  3. signs that structure using private ed25519
     (http://ed25519.cr.yp.to/) signature key
  4. takes remote node’s exchange public key and performs Diffie-Hellman
     computation on this remote static public key and private ephemeral
     one
  5. derive the keys:
       1. initialize BLAKE2Xb (https://blake2.net/) XOF with derived
          ephemeral key and 96-byte output length
       2. feed N N C P E 0x00 0x00 0x04 magic number to XOF
       3. read 32-bytes of "size" AEAD encryption key
       4. read 32-bytes of payload AEAD encryption key
       5. optionally read 32-bytes pad generation key
  6. encrypts size, appends its authenticated ciphertext to the header
  7. encrypts payload, appends its authenticated ciphertext
  8. possibly appends any kind of "junk" noise data to hide real
     payload’s size from the adversary (generated using XOF with
     unlimited output length)


File: nncp.info,  Node: Sync,  Next: EBlob,  Prev: Packet,  Up: Top

Synchronization protocol
************************

So-called synchronization protocol (SP) is used in current TCP daemon’s
implementation.  It is used for synchronizing *note spool: Spool.
directory contents between two nodes.

   It is aimed to be very simple and effective.  It uses reliable
transport like TCP connections.  It must be effective both on
single-duplex and full-duplex links: for example satellites have very
high throughput but high-delay links, so acknowledging of each received
packet, like XMODEM (https://en.wikipedia.org/wiki/XMODEM) does, causes
unacceptable performance degradation.

   SP works on top of ‘Noise_IK_25519_ChaChaPoly_BLAKE2b’
(http://noiseprotocol.org/noise.html#interactive-patterns) protocol.
Each Noise packet is sent inside an XDR
(https://tools.ietf.org/html/rfc4506) envelope:

+-----------------+
| MAGIC | PAYLOAD |
+-----------------+

               XDR type               Value
---------------------------------------------------------------------------
Magic number   8-byte, fixed length   N N C P S 0x00 0x00 0x01
               opaque data
Payload        variable length        Noise packet itself
               opaque data

   Peers static keys are specified as *note _noisepub_: Configuration.
configuration entry.

   Payload inside Noise packets has maximum size of _64 KiB - 256 B =
65280 B_. It is sent immediately in the first message by each side.  The
very first payload (that is carried inside handshake messages) is always
padded to the maximum size with _HALT_ packets (read below), for hiding
actual number of _INFO_ packets (number of files available for
transmission).

   Each SP payload is a concatenation of SP packets.  Each packet has
XDR-encoded header and then corresponding XDR-encoded body.  Header is
just an unsigned integer telling what body structure follows.

_HALT_
     Stop file transmission, empty sending queue on the remote side.
     Actually _HALT_ packet does not have any body, only the header with
     the type.  It is also used in the first payload for padding to the
     maximum size.

     +------+
     | HALT |
     +------+

_PING_
     Dummy packet only used for determining workability of the
     connection.

     +------+
     | PING |
     +------+

_INFO_
     Information about the file we have for transmission.

     +------+--------------------+
     | INFO | NICE | SIZE | HASH |
     +------+--------------------+

                    XDR type               Value
     ---------------------------------------------------------------------------
     Niceness       unsigned integer       1-255, file niceness level
     Size           unsigned hyper         File size
                    integer
     Hash           32-byte, fixed         Unique file identifier, its
                    length opaque data     checksum

_FREQ_
     File transmission request.  Ask remote side to queue the file for
     transmission.

     +------+---------------+
     | FREQ | HASH | OFFSET |
     +------+---------------+

                    XDR type               Value
     ---------------------------------------------------------------------------
     Hash           32-byte, fixed         Unique file identifier, its
                    length opaque data     checksum
     Offset         unsigned hyper         Offset from which remote side must
                    integer                transmit the file

_FILE_
     Chunk of file.

     +------+-------------------------+
     | FILE | HASH | OFFSET | PAYLOAD |
     +------+-------------------------+

                    XDR type               Value
     ---------------------------------------------------------------------------
     Hash           32-byte, fixed         Unique file identifier, its
                    length opaque data     checksum
     Offset         unsigned hyper         Offset from which transmission
                    integer                goes
     Payload        variable length        Chunk of file itself
                    opaque data

_DONE_
     Signal remote side that we have successfully downloaded the file.

     +------+------+
     | DONE | HASH |
     +------+------+

                    XDR type               Value
     ---------------------------------------------------------------------------
     Hash           32-byte, fixed         Unique file identifier, its
                    length opaque data     checksum

   Typical peer’s behaviour is following:

     ┌─────────┐                       ┌─────────┐     
     │Initiator│                       │Responder│     
     └────┬────┘                       └────┬────┘     
          │                                 │          
          │         ╔═════════════╗         │          
══════════╪═════════╣ preparation ╠═════════╪══════════
          │         ╚═════════════╝         │          
          │                                 │          
          │              [s]                │          
          │<────────────────────────────────│          
          │                                 │          
          │                                 │          
          │         ╔═════════════╗         │          
══════════╪═════════╣ interactive ╠═════════╪══════════
          │         ╚═════════════╝         │          
          │                                 │          
          │[e, es, s, ss], INFO..., HALT... │          
          │────────────────────────────────>│          
          │                                 │          
          │ [e, ee, se], INFO..., HALT...   │          
          │<────────────────────────────────│          
          │                                 │          
          │   INFO..., FREQ..., DONE...     │          
          │────────────────────────────────>│          
          │                                 │          
          │   INFO..., FREQ..., DONE...     │          
          │<────────────────────────────────│          
          │                                 │          
          │FILE..., INFO..., DONE..., PING  │          
          │────────────────────────────────>│          
          │                                 │          
          │FILE..., INFO..., DONE..., PING  │          
          │<────────────────────────────────│          
          │                                 │          

  1. Perform _Noise-IK_ handshake:

     *Initiator*
          Collects all _tx_-related files information and prepares
          payload filled with _INFO_s for including in the *first*
          handshake message.
     *Responder*
          After receiving the first handshake message, it gains remote
          identity knowledge and similarly prepares the payload for
          including in the *second* handshake message.

     All payloads are padded to maximal message size with _HALT_s.

  2. If queued _INFO_s are not sent completely in handshake payloads,
     then send all of remaining in the transport stage.

  3. When _INFO_ packet received:

        • Check that it has an acceptable niceness level.  Ignore it if
          it is too nice.
        • If already downloaded file exists, then queue _DONE_ sending.
        • If ‘.seen’ exists, then queue _DONE_ sending.
        • If ‘.part’ exists, then queue _FREQ_ sending with
          corresponding offset.

  4. When _FREQ_ packet received, insert it to current sending queue
     with niceness level sort: higher priority packets will be sent
     first.  Sending queue contains files with offsets that are needed
     to be sent.

  5. While sending queue is not empty, send _FILE_ packets.  _FREQ_
     could contain offset equal to size – anyway sent _FILE_ packet with
     an empty payload.  _FILE_ sending is performed only if no other
     outgoing packets are queued: _INFO_s have higher priority.

  6. When _FILE_ packet received, check if it is completely downloaded
     (comparing to _INFO_’s packet size information).  If so, then run
     background integrity checker on it.  If check succeeds, then delete
     ‘.part’ suffix from file’s name and send _DONE_ packet.

  7. When _DONE_ packet received, delete corresponding file.

  8. When _HALT_ packet received, empty file sending queue.

  9. Each second, node checks: are there any new _tx_ packets appeared
     and queues corresponding _INFO_ packets.

  10. Each minute, if no packets were sent, node sends _PING_ packet.

  11. If no non-PING packets are sent and received during *note
     onlinedeadline: CfgOnlineDeadline. duration, then close the
     connection.  There is no explicit indication that session is over.

  12. If no packets are received during two minutes (two PING timeouts),
     then close the connection.


File: nncp.info,  Node: EBlob,  Next: Thanks,  Prev: Sync,  Up: Top

EBlob format
************

Eblob is an encrypted blob (binary large object, in the terms of
databases), holding any kind of symmetrically encrypted data with the
passphrase used to derive the key.  It is used to secure configuration
files, holding valuable private keys, allowing them to be transferred
safely everywhere.

   In fact it uses two factors for securing the data:

   • *salt*, that is kept inside ‘eblob’, something _you have_
   • *passphrase*, that is kept inside the head, something _you know_

   Whole security depends on the passphrase itself.  Pay attention that
this is *not* the password.  Password is a short string of high entropy
(highly random) characters, but passphrase is (very) long string of
low-entropy characters.  Low-entropy text is much more easier to
remember, and its length provides pretty enough entropy as a result.

   Password strengthening function is applied to that passphrase to
mitigate brute-force and dictionary attacks on it.  Here, Balloon
(https://crypto.stanford.edu/balloon/) memory-hard password hashing
function is used, together with BLAKE2b-256 hash.  It has proven
memory-hardness properties, very easy to implement, resistant to cache
attacks and seems more secure than Argon2 (Password Hashing Competition
(https://password-hashing.net/) winner).

   Eblob is an XDR (https://tools.ietf.org/html/rfc4506)-encoded
structure:

+-------+------------------+------+
| MAGIC | S | T | P | SALT | BLOB |
+-------+------------------+------+

               XDR type               Value
---------------------------------------------------------------------------
Magic number   8-byte, fixed length   N N C P B 0x00 0x00 0x03
               opaque data
S, T, P        unsigned integer       Space cost, time cost and parallel
                                      jobs number
Salt           32 bytes, fixed        Randomly generated salt
               length opaque data
Blob           variable length        Authenticated and Encrypted data
               opaque data            itself

  1. generate the main key using ‘balloon(BLAKE2b-256, S, T, P, salt,
     password)’
  2. initialize BLAKE2Xb (https://blake2.net/) XOF with generated main
     key and 32-byte output length
  3. feed N N C P B 0x00 0x00 0x03 magic number to XOF
  4. read 32-bytes of blob AEAD encryption key
  5. encrypt and authenticate blob using ChaCha20
     (https://cr.yp.to/chacha.html)-Poly1305
     (https://en.wikipedia.org/wiki/Poly1305).  Blob is splitted on 128
     KiB blocks.  Each block is encrypted with increasing nonce counter.
     Eblob packet itself, with empty blob field, is fed as an additional
     authenticated data


File: nncp.info,  Node: Thanks,  Next: Contacts,  Prev: EBlob,  Up: Top

Thanks
******

There are people deserving to be thanked for helping this project:

   • Shawn K. Quinn for his descriptive instructions about building NNCP
     under Ubuntu GNU/Linux distributions and bug reports.

   • John Goerzen (mailto:jgoerzen@complete.org) for his feature
     suggestions and Debian package maintenance.


File: nncp.info,  Node: Contacts,  Next: Copying,  Prev: Thanks,  Up: Top

Contacts
********

Please send questions regarding the use of NNCP, bug reports and patches
to nncp-devel (https://lists.cypherpunks.ru/pipermail/nncp-devel/)
mailing list.  Announcements also go to this mailing list.

   Official website is <http://www.nncpgo.org/>.


File: nncp.info,  Node: Copying,  Prev: Contacts,  Up: Top

Copying conditions
******************

This manual is for NNCP (Node to Node copy) – collection of utilities
simplifying secure store-and-forward files and mail exchanging.

   Copyright © 2016-2020 Sergey Matveev <stargrave@stargrave.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "Copying conditions".

                GNU Free Documentation License
                 Version 1.3, 3 November 2008


 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of
the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
"Massive Multiauthor Collaboration" (or "MMC") contained in the site
means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 
license published by Creative Commons Corporation, a not-for-profit 
corporation with a principal place of business in San Francisco, 
California, as well as future copyleft versions of that license 
published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in 
part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this 
License, and if all works that were first published under this License 
somewhere other than this MMC, and subsequently incorporated in whole or 
in part into the MMC, (1) had no cover texts or invariant sections, and 
(2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.



Tag Table:
Node: Top595
Node: Comparison3325
Node: Use cases8819
Node: UsecaseMail9667
Node: UsecasePOP11048
Node: UsecaseUnreliable11939
Node: UsecaseQoS13004
Node: UsecaseNoLink14237
Node: UsecaseBroadcast15506
Node: UsecaseSatelliteLinks16371
Node: UsecaseF2F17806
Node: UsecaseAirgap19683
Node: UsecaseCensor21397
Node: UsecaseSpy22448
Node: UsecaseCaller24530
Node: Workflow25635
Node: News27747
Node: Release 5.3.328407
Node: Release 5.3.228575
Node: Release 5.3.128872
Node: Release 5.3.029216
Node: Release 5.2.130007
Node: Release 5.2.030207
Node: Release 5.1.230699
Node: Release 5.1.131229
Node: Release 5.1.031429
Node: Release 5.0.032142
Node: Release 4.133511
Node: Release 4.033691
Node: Release 3.434609
Node: Release 3.334785
Node: Release 3.235670
Node: Release 3.136150
Node: Release 3.036347
Node: Release 2.038026
Node: Release 1.038548
Node: Release 0.1239575
Node: Release 0.1139774
Node: Release 0.1039961
Node: Release 0.940207
Node: Release 0.840429
Node: Release 0.740681
Node: Release 0.641798
Node: Release 0.542018
Node: Release 0.442239
Node: Release 0.342791
Node: Release 0.242947
Node: Русский43940
Node: Об утилитах44347
Node: Сравнение48501
Node: Сценарии57572
Node: UsecaseMailRU58914
Node: UsecasePOPRU61327
Node: UsecaseUnreliableRU62772
Node: UsecaseQoSRU64533
Node: UsecaseNoLinkRU66524
Node: UsecaseBroadcastRU68882
Node: UsecaseSatelliteLinksRU70460
Node: UsecaseF2FRU73037
Node: UsecaseAirgapRU76375
Node: UsecaseCensorRU79675
Node: UsecaseSpyRU81473
Node: UsecaseCallerRU85299
Node: Новости86825
Node: Релиз 5.3.387540
Node: Релиз 5.3.287816
Node: Релиз 5.3.188222
Node: Релиз 5.3.088712
Node: Релиз 5.2.190152
Node: Релиз 5.2.090453
Node: Релиз 5.1.291290
Node: Релиз 5.1.192256
Node: Релиз 5.1.092515
Node: Релиз 5.0.093662
Node: Релиз 4.196022
Node: Релиз 4.096291
Node: Релиз 3.497857
Node: Релиз 3.398086
Node: Релиз 3.299539
Node: Релиз 3.1100325
Node: Релиз 3.0100651
Node: Релиз 2.0103268
Node: Релиз 1.0104092
Node: Релиз 0.12105865
Node: Релиз 0.11106119
Node: Релиз 0.10106360
Node: Релиз 0.9106716
Node: Релиз 0.8107006
Node: Релиз 0.7107392
Node: Релиз 0.6109259
Node: Релиз 0.5109572
Node: Релиз 0.4109910
Node: Релиз 0.3110813
Node: Релиз 0.2111015
Node: Installation112686
Node: Tarballs114147
Node: Integrity114341
Node: Build-instructions116609
Node: Sources117352
Node: Configuration118959
Ref: CfgNotify121389
Ref: CfgExec122883
Ref: CfgIncoming123587
Ref: CfgFreq123725
Ref: CfgVia124132
Ref: CfgAddrs124437
Ref: CfgXxRate124989
Ref: CfgOnlineDeadline125272
Ref: CfgMaxOnlineTime125819
Ref: CfgCalls125968
Node: Shared spool126153
Node: Call126721
Node: Integration133284
Node: FreqIndex133768
Node: Postfix134409
Node: Feeds138181
Node: WARCs138985
Node: BitTorrent141585
Node: DownloadService143493
Node: Git145319
Node: Multimedia147491
Node: Commands148099
Ref: OptMinSize148561
Node: nncp-bundle150044
Node: nncp-call152148
Node: nncp-caller154236
Node: nncp-cfgenc154712
Node: nncp-cfgmin156456
Node: nncp-cfgnew156876
Node: nncp-check157418
Node: nncp-daemon157812
Node: nncp-exec158728
Node: nncp-file159802
Node: nncp-freq162206
Node: nncp-log162776
Node: nncp-pkt162989
Node: nncp-reass164208
Node: nncp-rm166672
Node: nncp-stat167883
Node: nncp-toss168357
Node: nncp-xfer169624
Node: Niceness170894
Node: Chunked172586
Ref: ChunkedZFS174381
Node: Bundles174925
Node: Spool177434
Node: Log179051
Node: Packet180206
Node: Plain180447
Node: Encrypted182734
Node: Sync186161
Node: EBlob195975
Node: Thanks198733
Node: Contacts199143
Node: Copying199489

End Tag Table


Local Variables:
coding: utf-8
End:
